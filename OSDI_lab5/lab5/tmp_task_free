//mimic env_free(struct Env *e)
	//struct Task *t;//tasks
	pte_t *pt;
	uint32_t pdeno, pteno;
	physaddr_t pa;

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (&tasks[pid] == cur_task)//curenv ???
		lcr3(PADDR(tasks[pid].pgdir));

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	static_assert(UTOP % PTSIZE == 0);
	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {

		// only look at mapped page tables
		if (!(tasks[pid].pgdir[pdeno] & PTE_P))
			continue;

		// find the pa and va of the page table
		pa = PTE_ADDR(tasks[pid].pgdir[pdeno]);
		pt = (pte_t*) KADDR(pa);

		// unmap all PTEs in this page table
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
			if (pt[pteno] & PTE_P)
				page_remove(tasks[pid].pgdir, PGADDR(pdeno, pteno, 0));
		}

		// free the page table itself
		tasks[pid].pgdir[pdeno] = 0;
		page_decref(pa2page(pa));
	}

	// free the page directory
	pa = PADDR(tasks[pid].pgdir);
	tasks[pid].pgdir = 0;
	page_decref(pa2page(pa));

	// return the environment to the free list
	tasks[pid].state = TASK_FREE;
	

	tasks[pid].task_id=0;
	tasks[pid].parent_id=0;

	uintptr_t us_start = USTACKTOP - USR_STACK_SIZE;//(uintptr_t) ROUNDDOWN(USTACKTOP - USR_STACK_SIZE, PGSIZE);
	uintptr_t us_end = USTACKTOP;//(uintptr_t) ROUNDDOWN(USTACKTOP, PGSIZE);
	//free USR STACK
	for(; us_start < us_end; us_start += PGSIZE){
		page_remove(kern_pgdir, us_start);
	}

	//env_link not show in struct Task
	//t->env_link = env_free_list;
	//env_free_list = t;
