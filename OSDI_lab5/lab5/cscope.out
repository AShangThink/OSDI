cscope 15 $HOME/nctuos               0000114621
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

39 
	$boŸmaö
()

41 
Proghdr
 *
ph
, *
ïh
;

44 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

47 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

48 
bad
;

51 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

52 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

53 ; 
ph
 < 
ïh
;Öh++)

56 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
,Öh->
p_off£t
);

60 (((*)()Ë(
ELFHDR
->
e_íåy
))();

62 
bad
:

63 
	`outw
(0x8A00, 0x8A00);

64 
	`outw
(0x8A00, 0x8E00);

67 
	}
}

72 
	$ªad£g
(
uöt32_t
 
∑
, uöt32_à
cou¡
, uöt32_à
off£t
)

74 
uöt32_t
 
íd_∑
;

76 
íd_∑
 = 
∑
 + 
cou¡
;

79 
∑
 &~(
SECTSIZE
 - 1);

82 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

87 
∑
 < 
íd_∑
) {

92 
	`ªad£˘
((
uöt8_t
*Ë
∑
, 
off£t
);

93 
∑
 +
SECTSIZE
;

94 
off£t
++;

96 
	}
}

99 
	$waôdisk
()

102 (
	`öb
(0x1F7) & 0xC0) != 0x40)

104 
	}
}

107 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

110 
	`waôdisk
();

112 
	`outb
(0x1F2, 1);

113 
	`outb
(0x1F3, 
off£t
);

114 
	`outb
(0x1F4, 
off£t
 >> 8);

115 
	`outb
(0x1F5, 
off£t
 >> 16);

116 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

117 
	`outb
(0x1F7, 0x20);

120 
	`waôdisk
();

123 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

124 
	}
}

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	sElf
 {

7 
uöt32_t
 
	me_magic
;

8 
uöt8_t
 
	me_ñf
[12];

9 
uöt16_t
 
	me_ty≥
;

10 
uöt16_t
 
	me_machöe
;

11 
uöt32_t
 
	me_vîsi⁄
;

12 
uöt32_t
 
	me_íåy
;

13 
uöt32_t
 
	me_phoff
;

14 
uöt32_t
 
	me_shoff
;

15 
uöt32_t
 
	me_Êags
;

16 
uöt16_t
 
	me_ehsize
;

17 
uöt16_t
 
	me_phítsize
;

18 
uöt16_t
 
	me_phnum
;

19 
uöt16_t
 
	me_shítsize
;

20 
uöt16_t
 
	me_shnum
;

21 
uöt16_t
 
	me_sh°∫dx
;

24 
	sProghdr
 {

25 
uöt32_t
 
	mp_ty≥
;

26 
uöt32_t
 
	mp_off£t
;

27 
uöt32_t
 
	mp_va
;

28 
uöt32_t
 
	mp_∑
;

29 
uöt32_t
 
	mp_fûesz
;

30 
uöt32_t
 
	mp_memsz
;

31 
uöt32_t
 
	mp_Êags
;

32 
uöt32_t
 
	mp_Æign
;

35 
	sSe˘hdr
 {

36 
uöt32_t
 
	msh_«me
;

37 
uöt32_t
 
	msh_ty≥
;

38 
uöt32_t
 
	msh_Êags
;

39 
uöt32_t
 
	msh_addr
;

40 
uöt32_t
 
	msh_off£t
;

41 
uöt32_t
 
	msh_size
;

42 
uöt32_t
 
	msh_lök
;

43 
uöt32_t
 
	msh_öfo
;

44 
uöt32_t
 
	msh_addølign
;

45 
uöt32_t
 
	msh_ítsize
;

49 
	#ELF_PROG_LOAD
 1

	)

52 
	#ELF_PROG_FLAG_EXEC
 1

	)

53 
	#ELF_PROG_FLAG_WRITE
 2

	)

54 
	#ELF_PROG_FLAG_READ
 4

	)

57 
	#ELF_SHT_NULL
 0

	)

58 
	#ELF_SHT_PROGBITS
 1

	)

59 
	#ELF_SHT_SYMTAB
 2

	)

60 
	#ELF_SHT_STRTAB
 3

	)

63 
	#ELF_SHN_UNDEF
 0

	)

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

8 
	mE_UNSPECIFIED
 = 1,

9 
	mE_BAD_ENV
 = 2,

11 
	mE_INVAL
 = 3,

12 
	mE_NO_MEM
 = 4,

13 
	mE_NO_FREE_ENV
 = 5,

15 
	mE_FAULT
 = 6,

17 
	mE_IPC_NOT_RECV
 = 7,

18 
	mE_EOF
 = 8,

20 
	mMAXERROR


	@inc/kbd.h

1 #i‚de‡
KBD_H


2 
	#KBD_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

83 
kbd_öô
();

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/mmu.h
>

15 
	#GD_KT
 0x08

16 
	#GD_KD
 0x10

17 
	#GD_UT
 0x18

18 
	#GD_UD
 0x20

19 
	#GD_TSS0
 0x28

20 

	)

87 
	#KERNBASE
 0xF0000000

	)

92 
	#IOPHYSMEM
 0x0A0000

	)

93 
	#EXTPHYSMEM
 0x100000

	)

96 
	#KSTACKTOP
 
KERNBASE


	)

97 
	#KSTKSIZE
 (8*
PGSIZE
)

98 
	#KSTKGAP
 (8*
PGSIZE
)

99 

	)

101 
	#MMIOLIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

102 
	#MMIOBASE
 (
MMIOLIM
 - 
PTSIZE
)

	)

104 
	#ULIM
 (
MMIOBASE
)

	)

112 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

114 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

116 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

123 
	#UTOP
 
UENVS


	)

125 
	#UXSTACKTOP
 
UTOP


	)

128 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

131 
	#UTEXT
 (2*
PTSIZE
)

	)

134 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

137 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

139 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

141 #i‚de‡
__ASSEMBLER__


143 
uöt32_t
 
	t±e_t
;

144 
uöt32_t
 
	tpde_t
;

146 #i‡
JOS_USER


161 vﬁ©ûê
±e_t
 
uv±
[];

162 vﬁ©ûê
pde_t
 
uvpd
[];

175 
	sPageInfo
 {

177 
PageInfo
 *
	mµ_lök
;

184 
uöt16_t
 
	mµ_ªf
;

	@inc/mmu.h

4 #i‚de‡
JOS_INC_MMU_H


5 
	#JOS_INC_MMU_H


	)

14 
	#GD_KT
 0x08

15 
	#GD_KD
 0x10

16 
	#GD_UT
 0x18

17 
	#GD_UD
 0x20

18 
	#GD_TSS0
 0x28

19 

	)

40 
	#PGNUM
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
)

	)

43 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

46 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

49 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

52 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

55 
	#NPDENTRIES
 1024

56 
	#NPTENTRIES
 1024

57 

	)

58 
	#PGSIZE
 4096

59 
	#PGSHIFT
 12

60 

	)

61 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

62 
	#PTSHIFT
 22

63 

	)

64 
	#PTXSHIFT
 12

65 
	#PDXSHIFT
 22

66 

	)

68 
	#PTE_P
 0x001

69 
	#PTE_W
 0x002

70 
	#PTE_U
 0x004

71 
	#PTE_PWT
 0x008

72 
	#PTE_PCD
 0x010

73 
	#PTE_A
 0x020

74 
	#PTE_D
 0x040

75 
	#PTE_PS
 0x080

76 
	#PTE_G
 0x100

77 

	)

80 
	#PTE_AVAIL
 0xE00

81 

	)

83 
	#PTE_SYSCALL
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

86 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

89 
	#CR0_PE
 0x00000001

90 
	#CR0_MP
 0x00000002

91 
	#CR0_EM
 0x00000004

92 
	#CR0_TS
 0x00000008

93 
	#CR0_ET
 0x00000010

94 
	#CR0_NE
 0x00000020

95 
	#CR0_WP
 0x00010000

96 
	#CR0_AM
 0x00040000

97 
	#CR0_NW
 0x20000000

98 
	#CR0_CD
 0x40000000

99 
	#CR0_PG
 0x80000000

100 

	)

101 
	#CR4_PCE
 0x00000100

102 
	#CR4_MCE
 0x00000040

103 
	#CR4_PSE
 0x00000010

104 
	#CR4_DE
 0x00000008

105 
	#CR4_TSD
 0x00000004

106 
	#CR4_PVI
 0x00000002

107 
	#CR4_VME
 0x00000001

108 

	)

110 
	#FL_CF
 0x00000001

111 
	#FL_PF
 0x00000004

112 
	#FL_AF
 0x00000010

113 
	#FL_ZF
 0x00000040

114 
	#FL_SF
 0x00000080

115 
	#FL_TF
 0x00000100

116 
	#FL_IF
 0x00000200

117 
	#FL_DF
 0x00000400

118 
	#FL_OF
 0x00000800

119 
	#FL_IOPL_MASK
 0x00003000

120 
	#FL_IOPL_0
 0x00000000

121 
	#FL_IOPL_1
 0x00001000

122 
	#FL_IOPL_2
 0x00002000

123 
	#FL_IOPL_3
 0x00003000

124 
	#FL_NT
 0x00004000

125 
	#FL_RF
 0x00010000

126 
	#FL_VM
 0x00020000

127 
	#FL_AC
 0x00040000

128 
	#FL_VIF
 0x00080000

129 
	#FL_VIP
 0x00100000

130 
	#FL_ID
 0x00200000

131 

	)

133 
	#FEC_PR
 0x1

134 
	#FEC_WR
 0x2

135 
	#FEC_U
 0x4

136 

	)

144 #ifde‡
__ASSEMBLER__


149 
	#SEG_NULL
 \

150 .
w‹d
 0, 0; \

151 .
byã
 0, 0, 0, 0

	)

152 
	#SEG
(
ty≥
,
ba£
,
lim
) \

153 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

154 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

155 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

159 
	~<öc/ty≥s.h
>

162 
	sSegdesc
 {

163 
	msd_lim_15_0
 : 16;

164 
	msd_ba£_15_0
 : 16;

165 
	msd_ba£_23_16
 : 8;

166 
	msd_ty≥
 : 4;

167 
	msd_s
 : 1;

168 
	msd_d∂
 : 2;

169 
	msd_p
 : 1;

170 
	msd_lim_19_16
 : 4;

171 
	msd_avl
 : 1;

172 
	msd_rsv1
 : 1;

173 
	msd_db
 : 1;

174 
	msd_g
 : 1;

175 
	msd_ba£_31_24
 : 8;

178 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

180 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

182 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

183 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

184 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

185 (Ë(
ba£
Ë>> 24 }

	)

186 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

187 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

188 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

189 (Ë(
ba£
Ë>> 24 }

	)

194 
	#STA_X
 0x8

195 
	#STA_E
 0x4

196 
	#STA_C
 0x4

197 
	#STA_W
 0x2

198 
	#STA_R
 0x2

199 
	#STA_A
 0x1

200 

	)

202 
	#STS_T16A
 0x1

203 
	#STS_LDT
 0x2

204 
	#STS_T16B
 0x3

205 
	#STS_CG16
 0x4

206 
	#STS_TG
 0x5

207 
	#STS_IG16
 0x6

208 
	#STS_TG16
 0x7

209 
	#STS_T32A
 0x9

210 
	#STS_T32B
 0xB

211 
	#STS_CG32
 0xC

212 
	#STS_IG32
 0xE

213 
	#STS_TG32
 0xF

214 

	)

222 #i‚de‡
__ASSEMBLER__


225 
	stss_°ru˘
 {

226 
uöt32_t
 
	mts_lök
;

227 
uöçå_t
 
	mts_e•0
;

228 
uöt16_t
 
	mts_ss0
;

229 
uöt16_t
 
	mts_∑ddög1
;

230 
uöçå_t
 
	mts_e•1
;

231 
uöt16_t
 
	mts_ss1
;

232 
uöt16_t
 
	mts_∑ddög2
;

233 
uöçå_t
 
	mts_e•2
;

234 
uöt16_t
 
	mts_ss2
;

235 
uöt16_t
 
	mts_∑ddög3
;

236 
phyßddr_t
 
	mts_¸3
;

237 
uöçå_t
 
	mts_eù
;

238 
uöt32_t
 
	mts_eÊags
;

239 
uöt32_t
 
	mts_óx
;

240 
uöt32_t
 
	mts_ecx
;

241 
uöt32_t
 
	mts_edx
;

242 
uöt32_t
 
	mts_ebx
;

243 
uöçå_t
 
	mts_e•
;

244 
uöçå_t
 
	mts_ebp
;

245 
uöt32_t
 
	mts_esi
;

246 
uöt32_t
 
	mts_edi
;

247 
uöt16_t
 
	mts_es
;

248 
uöt16_t
 
	mts_∑ddög4
;

249 
uöt16_t
 
	mts_cs
;

250 
uöt16_t
 
	mts_∑ddög5
;

251 
uöt16_t
 
	mts_ss
;

252 
uöt16_t
 
	mts_∑ddög6
;

253 
uöt16_t
 
	mts_ds
;

254 
uöt16_t
 
	mts_∑ddög7
;

255 
uöt16_t
 
	mts_fs
;

256 
uöt16_t
 
	mts_∑ddög8
;

257 
uöt16_t
 
	mts_gs
;

258 
uöt16_t
 
	mts_∑ddög9
;

259 
uöt16_t
 
	mts_ldt
;

260 
uöt16_t
 
	mts_∑ddög10
;

261 
uöt16_t
 
	mts_t
;

262 
uöt16_t
 
	mts_iomb
;

266 
	sG©edesc
 {

267 
	mgd_off_15_0
 : 16;

268 
	mgd_£l
 : 16;

269 
	mgd_¨gs
 : 5;

270 
	mgd_rsv1
 : 3;

271 
	mgd_ty≥
 : 4;

272 
	mgd_s
 : 1;

273 
	mgd_d∂
 : 2;

274 
	mgd_p
 : 1;

275 
	mgd_off_31_16
 : 16;

292 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

294 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

295 (
g©e
).
gd_£l
 = (
£l
); \

296 (
g©e
).
gd_¨gs
 = 0; \

297 (
g©e
).
gd_rsv1
 = 0; \

298 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

299 (
g©e
).
gd_s
 = 0; \

300 (
g©e
).
gd_d∂
 = (
d∂
); \

301 (
g©e
).
gd_p
 = 1; \

302 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

303 }

	)

306 
	#SETCALLGATE
(
g©e
, 
£l
, 
off
, 
d∂
) \

308 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

309 (
g©e
).
gd_£l
 = (
£l
); \

310 (
g©e
).
gd_¨gs
 = 0; \

311 (
g©e
).
gd_rsv1
 = 0; \

312 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

313 (
g©e
).
gd_s
 = 0; \

314 (
g©e
).
gd_d∂
 = (
d∂
); \

315 (
g©e
).
gd_p
 = 1; \

316 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

317 }

	)

320 
	sP£udodesc
 {

321 
uöt16_t
 
	mpd_lim
;

322 
uöt32_t
 
	mpd_ba£
;

323 } 
__©åibuã__
 ((
∑cked
));

	@inc/shell.h

1 #i‚de‡
SHELL_H


2 
	#SHELL_H


	)

4 
	#SHELL_HIST_MAX
 10

	)

5 
	#BUF_LEN
 1024

	)

7 
	sComm™d
 {

8 c⁄° *
	m«me
;

9 c⁄° *
	mdesc
;

11 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
);

14 
shñl
();

15 
m⁄_hñp
(
¨gc
, **
¨gv
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
);

17 
¥öt_tick
(
¨gc
, **
¨gv
);

18 
shñl_hi°_öô
();

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

6 
__buûtö_va_li°
 
	tva_li°
;

8 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
◊p,Üa°)

	)

10 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
◊p,Åy≥)

	)

12 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
k_gëc
();

14 
k_puts
(*
ãxt
);

15 
k_putch
(
c
);

18 
k_puts
(*
ãxt
);

19 
¥ötk
(c⁄° *
fmt
, ...);

22 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

23 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

24 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

25 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

28 
	`˝rötf
(c⁄° *
fmt
, ...);

29 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

32 *
	`ªadlöe
(c⁄° *
¥om±
);

35 
	`˝utch¨
(
ch
);

36 
	`gëch¨
();

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 * 
°rˇt
(*
d°
, c⁄° *
§c
);

11 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

12 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

13 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

14 * 
°rchr
(c⁄° *
s
, 
c
);

15 * 
°rföd
(c⁄° *
s
, 
c
);

17 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

18 * 
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

19 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

20 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

21 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

23 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/syscall.h

1 #i‚de‡
USR_SYSCALL_H


2 
	#USR_SYSCALL_H


	)

3 
	~<öc/ty≥s.h
>

7 
	mSYS_puts
 = 0,

8 
	mSYS_gëc
,

9 
	mSYS_gëpid
,

10 
	mSYS_f‹k
,

11 
	mSYS_kûl
,

12 
	mSYS_¶ìp
,

13 
	mSYS_gë_num_u£d_∑ge
,

14 
	mSYS_gë_num_‰ì_∑ge
,

15 
	mSYS_gë_ticks
,

16 
	mSYS_£âextcﬁ‹
,

17 
	mSYS_˛s
,

19 
	mNSYSCALLS


22 
öt32_t
 
gë_num_u£d_∑ge
();

24 
öt32_t
 
˛s
();

26 
öt32_t
 
gë_num_‰ì_∑ge
();

28 
gë_ticks
();

30 
£âextcﬁ‹
(
f‹ecﬁ‹
, 
backcﬁ‹
);

32 
öt32_t
 
f‹k
();

34 
öt32_t
 
gëpid
();

36 
kûl_£lf
();

38 
¶ìp
(
uöt32_t
 
ticks
);

40 
puts
(c⁄° *
s
, 
size_t
 
Àn
);

41 
gëc
();

	@inc/timer.h

1 #i‚de‡
TIMER_H


2 
	#TIMER_H


	)

3 
timî_öô
();

4 
gë_tick
();

	@inc/trap.h

1 #i‚de‡
JOS_INC_TRAP_H


2 
	#JOS_INC_TRAP_H


	)

6 
	#T_DIVIDE
 0

7 
	#T_DEBUG
 1

8 
	#T_NMI
 2

9 
	#T_BRKPT
 3

10 
	#T_OFLOW
 4

11 
	#T_BOUND
 5

12 
	#T_ILLOP
 6

13 
	#T_DEVICE
 7

14 
	#T_DBLFLT
 8

16 
	#T_TSS
 10

17 
	#T_SEGNP
 11

18 
	#T_STACK
 12

19 
	#T_GPFLT
 13

20 
	#T_PGFLT
 14

22 
	#T_FPERR
 16

23 
	#T_ALIGN
 17

24 
	#T_MCHK
 18

25 
	#T_SIMDERR
 19

26 

	)

29 
	#T_SYSCALL
 48

30 
	#T_DEFAULT
 500

31 

	)

32 
	#IRQ_OFFSET
 32

33 

	)

35 
	#IRQ_TIMER
 0

	)

36 
	#IRQ_KBD
 1

	)

37 
	#IRQ_SERIAL
 4

	)

38 
	#IRQ_SPURIOUS
 7

	)

39 
	#IRQ_IDE
 14

	)

40 
	#IRQ_ERROR
 19

	)

42 #i‚de‡
__ASSEMBLER__


44 
	~<öc/ty≥s.h
>

46 
	sPushRegs
 {

48 
uöt32_t
 
	mªg_edi
;

49 
uöt32_t
 
	mªg_esi
;

50 
uöt32_t
 
	mªg_ebp
;

51 
uöt32_t
 
	mªg_€•
;

52 
uöt32_t
 
	mªg_ebx
;

53 
uöt32_t
 
	mªg_edx
;

54 
uöt32_t
 
	mªg_ecx
;

55 
uöt32_t
 
	mªg_óx
;

56 } 
__©åibuã__
((
∑cked
));

58 
	sTøp‰ame
 {

59 
PushRegs
 
	mtf_ªgs
;

60 
uöt16_t
 
	mtf_es
;

61 
uöt16_t
 
	mtf_∑ddög1
;

62 
uöt16_t
 
	mtf_ds
;

63 
uöt16_t
 
	mtf_∑ddög2
;

64 
uöt32_t
 
	mtf_å≠no
;

66 
uöt32_t
 
	mtf_îr
;

67 
uöçå_t
 
	mtf_eù
;

68 
uöt16_t
 
	mtf_cs
;

69 
uöt16_t
 
	mtf_∑ddög3
;

70 
uöt32_t
 
	mtf_eÊags
;

72 
uöçå_t
 
	mtf_e•
;

73 
uöt16_t
 
	mtf_ss
;

74 
uöt16_t
 
	mtf_∑ddög4
;

75 } 
__©åibuã__
((
∑cked
));

77 
	sUTøp‰ame
 {

79 
uöt32_t
 
	mutf_Áu…_va
;

80 
uöt32_t
 
	mutf_îr
;

82 
PushRegs
 
	mutf_ªgs
;

83 
uöçå_t
 
	mutf_eù
;

84 
uöt32_t
 
	mutf_eÊags
;

86 
uöçå_t
 
	mutf_e•
;

87 } 
__©åibuã__
((
∑cked
));

89 (*
	tTøpH™dÀr
)(
	tTøp‰ame
 *
	ttf
);

91 
	`ªgi°î_h™dÀr
(
å≠no
, 
TøpH™dÀr
 
hnd
, (*
å≠_íåy
)(), 
isTøp
, 
d∂
);

	@inc/types.h

4 #i‚de‡
JOS_INC_TYPES_H


5 
	#JOS_INC_TYPES_H


	)

7 #i‚de‡
NULL


8 
	#NULL
 ((*Ë0)

	)

12 
_Boﬁ
 
	tboﬁ
;

13 íum { 
	mÁl£
, 
	måue
 };

16 
__sig√d
 
	töt8_t
;

17 
	tuöt8_t
;

18 
	töt16_t
;

19 
	tuöt16_t
;

20 
	töt32_t
;

21 
	tuöt32_t
;

22 
	töt64_t
;

23 
	tuöt64_t
;

29 
öt32_t
 
	töçå_t
;

30 
uöt32_t
 
	tuöçå_t
;

31 
uöt32_t
 
	tphyßddr_t
;

34 
uöt32_t
 
	tµn_t
;

37 
uöt32_t
 
	tsize_t
;

40 
öt32_t
 
	tssize_t
;

43 
öt32_t
 
	toff_t
;

46 
	#MIN
(
_a
, 
_b
) \

48 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

49 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

50 
__a
 <
__b
 ? __a : __b; \

51 })

	)

52 
	#MAX
(
_a
, 
_b
) \

54 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

55 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

56 
__a
 >
__b
 ? __a : __b; \

57 })

	)

61 
	#ROUNDDOWN
(
a
, 
n
) \

63 
uöt32_t
 
__a
 = (uöt32_tË(
a
); \

64 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

65 })

	)

67 
	#ROUNDUP
(
a
, 
n
) \

69 
uöt32_t
 
__n
 = (uöt32_tË(
n
); \

70 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt32_t
Ë◊Ë+ 
__n
 - 1, __n)); \

71 })

	)

74 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/x86.h

4 #i‚de‡
JOS_INC_X86_H


5 
	#JOS_INC_X86_H


	)

7 
	~<öc/ty≥s.h
>

9 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

39 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
__ölöe
 

42 
	$bªakpoöt
()

44 
__asm
 
	`__vﬁ©ûe
("int3");

45 
	}
}

47 
__ölöe
 
uöt8_t


48 
	$öb
(
p‹t
)

50 
uöt8_t
 
d©a
;

51 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

52  
d©a
;

53 
	}
}

55 
__ölöe
 

56 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

58 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

59 "=D" (
addr
), "=c" (
˙t
) :

60 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

62 
	}
}

64 
__ölöe
 
uöt16_t


65 
	$öw
(
p‹t
)

67 
uöt16_t
 
d©a
;

68 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

69  
d©a
;

70 
	}
}

72 
__ölöe
 

73 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

75 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

76 "=D" (
addr
), "=c" (
˙t
) :

77 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

79 
	}
}

81 
__ölöe
 
uöt32_t


82 
	$öl
(
p‹t
)

84 
uöt32_t
 
d©a
;

85 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

86  
d©a
;

87 
	}
}

89 
__ölöe
 

90 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

92 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

93 "=D" (
addr
), "=c" (
˙t
) :

94 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

96 
	}
}

98 
__ölöe
 

99 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

101 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

102 
	}
}

104 
__ölöe
 

105 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

107 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

108 "=S" (
addr
), "=c" (
˙t
) :

109 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

111 
	}
}

113 
__ölöe
 

114 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

116 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

117 
	}
}

119 
__ölöe
 

120 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

122 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

123 "=S" (
addr
), "=c" (
˙t
) :

124 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

126 
	}
}

128 
__ölöe
 

129 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

131 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

132 "=S" (
addr
), "=c" (
˙t
) :

133 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

135 
	}
}

137 
__ölöe
 

138 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

140 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

141 
	}
}

143 
__ölöe
 

144 
	$övÕg
(*
addr
)

146 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

147 
	}
}

149 
__ölöe
 

150 
	$lidt
(*
p
)

152 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

153 
	}
}

155 
__ölöe
 

156 
	$lgdt
(*
p
)

158 
__asm
 
	`__vﬁ©ûe
("lgdà(%0)" : : "r" (
p
));

159 
	}
}

161 
__ölöe
 

162 
	$Œdt
(
uöt16_t
 
£l
)

164 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

165 
	}
}

167 
__ölöe
 

168 
	$…r
(
uöt16_t
 
£l
)

170 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

171 
	}
}

173 
__ölöe
 

174 
	$l¸0
(
uöt32_t
 
vÆ
)

176 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

177 
	}
}

179 
__ölöe
 
uöt32_t


180 
	$r¸0
()

182 
uöt32_t
 
vÆ
;

183 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

184  
vÆ
;

185 
	}
}

187 
__ölöe
 
uöt32_t


188 
	$r¸2
()

190 
uöt32_t
 
vÆ
;

191 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

192  
vÆ
;

193 
	}
}

195 
__ölöe
 

196 
	$l¸3
(
uöt32_t
 
vÆ
)

198 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

199 
	}
}

201 
__ölöe
 
uöt32_t


202 
	$r¸3
()

204 
uöt32_t
 
vÆ
;

205 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

206  
vÆ
;

207 
	}
}

209 
__ölöe
 

210 
	$l¸4
(
uöt32_t
 
vÆ
)

212 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

213 
	}
}

215 
__ölöe
 
uöt32_t


216 
	$r¸4
()

218 
uöt32_t
 
¸4
;

219 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

220  
¸4
;

221 
	}
}

223 
__ölöe
 

224 
	$ébÊush
()

226 
uöt32_t
 
¸3
;

227 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

228 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

229 
	}
}

231 
__ölöe
 
uöt32_t


232 
	$ªad_eÊags
()

234 
uöt32_t
 
eÊags
;

235 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

236  
eÊags
;

237 
	}
}

239 
__ölöe
 

240 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

242 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

243 
	}
}

245 
__ölöe
 
uöt32_t


246 
	$ªad_ebp
()

248 
uöt32_t
 
ebp
;

249 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

250  
ebp
;

251 
	}
}

253 
__ölöe
 
uöt32_t


254 
	$ªad_e•
()

256 
uöt32_t
 
e•
;

257 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

258  
e•
;

259 
	}
}

261 
__ölöe
 

262 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

264 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

265 
asm
 volatile("cpuid"

266 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

267 : "a" (
öfo
));

268 i‡(
óxp
)

269 *
óxp
 = 
óx
;

270 i‡(
ebxp
)

271 *
ebxp
 = 
ebx
;

272 i‡(
ecxp
)

273 *
ecxp
 = 
ecx
;

274 i‡(
edxp
)

275 *
edxp
 = 
edx
;

276 
	}
}

278 
__ölöe
 
uöt64_t


279 
	$ªad_tsc
()

281 
uöt64_t
 
tsc
;

282 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

283  
tsc
;

284 
	}
}

286 
ölöe
 
uöt32_t


287 
	$xchg
(vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
√wvÆ
)

289 
uöt32_t
 
ªsu…
;

292 
asm
 volatile("lock; xchgl %0, %1" :

293 "+m" (*
addr
), "˜" (
ªsu…
) :

294 "1" (
√wvÆ
) :

296  
ªsu…
;

297 
	}
}

	@kernel/assert.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

7 
v¥ötk
(c⁄° *
fmt
, 
va_li°
 
≠
);

9 c⁄° *
	g∑nic°r
;

16 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

18 
va_li°
 
≠
;

20 i‡(
∑nic°r
)

21 
dód
;

22 
∑nic°r
 = 
fmt
;

25 
__asm
 
	`__vﬁ©ûe
("cli; cld");

27 
	`va_°¨t
(
≠
, 
fmt
);

28 
	`¥ötk
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

29 
	`v¥ötk
(
fmt
, 
≠
);

30 
	`¥ötk
("\n");

31 
	`va_íd
(
≠
);

33 
dód
:

35 
	}
}

39 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

41 
va_li°
 
≠
;

43 
	`va_°¨t
(
≠
, 
fmt
);

44 
	`¥ötk
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

45 
	`v¥ötk
(
fmt
, 
≠
);

46 
	`¥ötk
("\n");

47 
	`va_íd
(
≠
);

48 
	}
}

	@kernel/entrypgdir.c

1 
	~<öc/mmu.h
>

2 
	~<öc/memœyout.h
>

4 
±e_t
 
	gíåy_pgèbÀ
[
NPTENTRIES
];

20 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

21 
pde_t
 
íåy_pgdú
[
NPDENTRIES
] = {

24 ((
uöçå_t
)
íåy_pgèbÀ
 - 
KERNBASE
Ë+ 
PTE_P
 + 
PTE_W
,

26 [
KERNBASE
>>
PDXSHIFT
]

27 ((
uöçå_t
)
íåy_pgèbÀ
 - 
KERNBASE
Ë+ 
PTE_P
 + 
PTE_W


28 
	}
};

32 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

33 
±e_t
 
íåy_pgèbÀ
[
NPTENTRIES
] = {

34 0x000000 | 
PTE_P
 | 
PTE_W
,

35 0x001000 | 
PTE_P
 | 
PTE_W
,

36 0x002000 | 
PTE_P
 | 
PTE_W
,

37 0x003000 | 
PTE_P
 | 
PTE_W
,

38 0x004000 | 
PTE_P
 | 
PTE_W
,

39 0x005000 | 
PTE_P
 | 
PTE_W
,

40 0x006000 | 
PTE_P
 | 
PTE_W
,

41 0x007000 | 
PTE_P
 | 
PTE_W
,

42 0x008000 | 
PTE_P
 | 
PTE_W
,

43 0x009000 | 
PTE_P
 | 
PTE_W
,

44 0x00a000 | 
PTE_P
 | 
PTE_W
,

45 0x00b000 | 
PTE_P
 | 
PTE_W
,

46 0x00c000 | 
PTE_P
 | 
PTE_W
,

47 0x00d000 | 
PTE_P
 | 
PTE_W
,

48 0x00e000 | 
PTE_P
 | 
PTE_W
,

49 0x00f000 | 
PTE_P
 | 
PTE_W
,

50 0x010000 | 
PTE_P
 | 
PTE_W
,

51 0x011000 | 
PTE_P
 | 
PTE_W
,

52 0x012000 | 
PTE_P
 | 
PTE_W
,

53 0x013000 | 
PTE_P
 | 
PTE_W
,

54 0x014000 | 
PTE_P
 | 
PTE_W
,

55 0x015000 | 
PTE_P
 | 
PTE_W
,

56 0x016000 | 
PTE_P
 | 
PTE_W
,

57 0x017000 | 
PTE_P
 | 
PTE_W
,

58 0x018000 | 
PTE_P
 | 
PTE_W
,

59 0x019000 | 
PTE_P
 | 
PTE_W
,

60 0x01a000 | 
PTE_P
 | 
PTE_W
,

61 0x01b000 | 
PTE_P
 | 
PTE_W
,

62 0x01c000 | 
PTE_P
 | 
PTE_W
,

63 0x01d000 | 
PTE_P
 | 
PTE_W
,

64 0x01e000 | 
PTE_P
 | 
PTE_W
,

65 0x01f000 | 
PTE_P
 | 
PTE_W
,

66 0x020000 | 
PTE_P
 | 
PTE_W
,

67 0x021000 | 
PTE_P
 | 
PTE_W
,

68 0x022000 | 
PTE_P
 | 
PTE_W
,

69 0x023000 | 
PTE_P
 | 
PTE_W
,

70 0x024000 | 
PTE_P
 | 
PTE_W
,

71 0x025000 | 
PTE_P
 | 
PTE_W
,

72 0x026000 | 
PTE_P
 | 
PTE_W
,

73 0x027000 | 
PTE_P
 | 
PTE_W
,

74 0x028000 | 
PTE_P
 | 
PTE_W
,

75 0x029000 | 
PTE_P
 | 
PTE_W
,

76 0x02a000 | 
PTE_P
 | 
PTE_W
,

77 0x02b000 | 
PTE_P
 | 
PTE_W
,

78 0x02c000 | 
PTE_P
 | 
PTE_W
,

79 0x02d000 | 
PTE_P
 | 
PTE_W
,

80 0x02e000 | 
PTE_P
 | 
PTE_W
,

81 0x02f000 | 
PTE_P
 | 
PTE_W
,

82 0x030000 | 
PTE_P
 | 
PTE_W
,

83 0x031000 | 
PTE_P
 | 
PTE_W
,

84 0x032000 | 
PTE_P
 | 
PTE_W
,

85 0x033000 | 
PTE_P
 | 
PTE_W
,

86 0x034000 | 
PTE_P
 | 
PTE_W
,

87 0x035000 | 
PTE_P
 | 
PTE_W
,

88 0x036000 | 
PTE_P
 | 
PTE_W
,

89 0x037000 | 
PTE_P
 | 
PTE_W
,

90 0x038000 | 
PTE_P
 | 
PTE_W
,

91 0x039000 | 
PTE_P
 | 
PTE_W
,

92 0x03a000 | 
PTE_P
 | 
PTE_W
,

93 0x03b000 | 
PTE_P
 | 
PTE_W
,

94 0x03c000 | 
PTE_P
 | 
PTE_W
,

95 0x03d000 | 
PTE_P
 | 
PTE_W
,

96 0x03e000 | 
PTE_P
 | 
PTE_W
,

97 0x03f000 | 
PTE_P
 | 
PTE_W
,

98 0x040000 | 
PTE_P
 | 
PTE_W
,

99 0x041000 | 
PTE_P
 | 
PTE_W
,

100 0x042000 | 
PTE_P
 | 
PTE_W
,

101 0x043000 | 
PTE_P
 | 
PTE_W
,

102 0x044000 | 
PTE_P
 | 
PTE_W
,

103 0x045000 | 
PTE_P
 | 
PTE_W
,

104 0x046000 | 
PTE_P
 | 
PTE_W
,

105 0x047000 | 
PTE_P
 | 
PTE_W
,

106 0x048000 | 
PTE_P
 | 
PTE_W
,

107 0x049000 | 
PTE_P
 | 
PTE_W
,

108 0x04a000 | 
PTE_P
 | 
PTE_W
,

109 0x04b000 | 
PTE_P
 | 
PTE_W
,

110 0x04c000 | 
PTE_P
 | 
PTE_W
,

111 0x04d000 | 
PTE_P
 | 
PTE_W
,

112 0x04e000 | 
PTE_P
 | 
PTE_W
,

113 0x04f000 | 
PTE_P
 | 
PTE_W
,

114 0x050000 | 
PTE_P
 | 
PTE_W
,

115 0x051000 | 
PTE_P
 | 
PTE_W
,

116 0x052000 | 
PTE_P
 | 
PTE_W
,

117 0x053000 | 
PTE_P
 | 
PTE_W
,

118 0x054000 | 
PTE_P
 | 
PTE_W
,

119 0x055000 | 
PTE_P
 | 
PTE_W
,

120 0x056000 | 
PTE_P
 | 
PTE_W
,

121 0x057000 | 
PTE_P
 | 
PTE_W
,

122 0x058000 | 
PTE_P
 | 
PTE_W
,

123 0x059000 | 
PTE_P
 | 
PTE_W
,

124 0x05a000 | 
PTE_P
 | 
PTE_W
,

125 0x05b000 | 
PTE_P
 | 
PTE_W
,

126 0x05c000 | 
PTE_P
 | 
PTE_W
,

127 0x05d000 | 
PTE_P
 | 
PTE_W
,

128 0x05e000 | 
PTE_P
 | 
PTE_W
,

129 0x05f000 | 
PTE_P
 | 
PTE_W
,

130 0x060000 | 
PTE_P
 | 
PTE_W
,

131 0x061000 | 
PTE_P
 | 
PTE_W
,

132 0x062000 | 
PTE_P
 | 
PTE_W
,

133 0x063000 | 
PTE_P
 | 
PTE_W
,

134 0x064000 | 
PTE_P
 | 
PTE_W
,

135 0x065000 | 
PTE_P
 | 
PTE_W
,

136 0x066000 | 
PTE_P
 | 
PTE_W
,

137 0x067000 | 
PTE_P
 | 
PTE_W
,

138 0x068000 | 
PTE_P
 | 
PTE_W
,

139 0x069000 | 
PTE_P
 | 
PTE_W
,

140 0x06a000 | 
PTE_P
 | 
PTE_W
,

141 0x06b000 | 
PTE_P
 | 
PTE_W
,

142 0x06c000 | 
PTE_P
 | 
PTE_W
,

143 0x06d000 | 
PTE_P
 | 
PTE_W
,

144 0x06e000 | 
PTE_P
 | 
PTE_W
,

145 0x06f000 | 
PTE_P
 | 
PTE_W
,

146 0x070000 | 
PTE_P
 | 
PTE_W
,

147 0x071000 | 
PTE_P
 | 
PTE_W
,

148 0x072000 | 
PTE_P
 | 
PTE_W
,

149 0x073000 | 
PTE_P
 | 
PTE_W
,

150 0x074000 | 
PTE_P
 | 
PTE_W
,

151 0x075000 | 
PTE_P
 | 
PTE_W
,

152 0x076000 | 
PTE_P
 | 
PTE_W
,

153 0x077000 | 
PTE_P
 | 
PTE_W
,

154 0x078000 | 
PTE_P
 | 
PTE_W
,

155 0x079000 | 
PTE_P
 | 
PTE_W
,

156 0x07a000 | 
PTE_P
 | 
PTE_W
,

157 0x07b000 | 
PTE_P
 | 
PTE_W
,

158 0x07c000 | 
PTE_P
 | 
PTE_W
,

159 0x07d000 | 
PTE_P
 | 
PTE_W
,

160 0x07e000 | 
PTE_P
 | 
PTE_W
,

161 0x07f000 | 
PTE_P
 | 
PTE_W
,

162 0x080000 | 
PTE_P
 | 
PTE_W
,

163 0x081000 | 
PTE_P
 | 
PTE_W
,

164 0x082000 | 
PTE_P
 | 
PTE_W
,

165 0x083000 | 
PTE_P
 | 
PTE_W
,

166 0x084000 | 
PTE_P
 | 
PTE_W
,

167 0x085000 | 
PTE_P
 | 
PTE_W
,

168 0x086000 | 
PTE_P
 | 
PTE_W
,

169 0x087000 | 
PTE_P
 | 
PTE_W
,

170 0x088000 | 
PTE_P
 | 
PTE_W
,

171 0x089000 | 
PTE_P
 | 
PTE_W
,

172 0x08a000 | 
PTE_P
 | 
PTE_W
,

173 0x08b000 | 
PTE_P
 | 
PTE_W
,

174 0x08c000 | 
PTE_P
 | 
PTE_W
,

175 0x08d000 | 
PTE_P
 | 
PTE_W
,

176 0x08e000 | 
PTE_P
 | 
PTE_W
,

177 0x08f000 | 
PTE_P
 | 
PTE_W
,

178 0x090000 | 
PTE_P
 | 
PTE_W
,

179 0x091000 | 
PTE_P
 | 
PTE_W
,

180 0x092000 | 
PTE_P
 | 
PTE_W
,

181 0x093000 | 
PTE_P
 | 
PTE_W
,

182 0x094000 | 
PTE_P
 | 
PTE_W
,

183 0x095000 | 
PTE_P
 | 
PTE_W
,

184 0x096000 | 
PTE_P
 | 
PTE_W
,

185 0x097000 | 
PTE_P
 | 
PTE_W
,

186 0x098000 | 
PTE_P
 | 
PTE_W
,

187 0x099000 | 
PTE_P
 | 
PTE_W
,

188 0x09a000 | 
PTE_P
 | 
PTE_W
,

189 0x09b000 | 
PTE_P
 | 
PTE_W
,

190 0x09c000 | 
PTE_P
 | 
PTE_W
,

191 0x09d000 | 
PTE_P
 | 
PTE_W
,

192 0x09e000 | 
PTE_P
 | 
PTE_W
,

193 0x09f000 | 
PTE_P
 | 
PTE_W
,

194 0x0a0000 | 
PTE_P
 | 
PTE_W
,

195 0x0a1000 | 
PTE_P
 | 
PTE_W
,

196 0x0a2000 | 
PTE_P
 | 
PTE_W
,

197 0x0a3000 | 
PTE_P
 | 
PTE_W
,

198 0x0a4000 | 
PTE_P
 | 
PTE_W
,

199 0x0a5000 | 
PTE_P
 | 
PTE_W
,

200 0x0a6000 | 
PTE_P
 | 
PTE_W
,

201 0x0a7000 | 
PTE_P
 | 
PTE_W
,

202 0x0a8000 | 
PTE_P
 | 
PTE_W
,

203 0x0a9000 | 
PTE_P
 | 
PTE_W
,

204 0x0Ø000 | 
PTE_P
 | 
PTE_W
,

205 0x0ab000 | 
PTE_P
 | 
PTE_W
,

206 0x0ac000 | 
PTE_P
 | 
PTE_W
,

207 0x0ad000 | 
PTE_P
 | 
PTE_W
,

208 0x0´000 | 
PTE_P
 | 
PTE_W
,

209 0x0af000 | 
PTE_P
 | 
PTE_W
,

210 0x0b0000 | 
PTE_P
 | 
PTE_W
,

211 0x0b1000 | 
PTE_P
 | 
PTE_W
,

212 0x0b2000 | 
PTE_P
 | 
PTE_W
,

213 0x0b3000 | 
PTE_P
 | 
PTE_W
,

214 0x0b4000 | 
PTE_P
 | 
PTE_W
,

215 0x0b5000 | 
PTE_P
 | 
PTE_W
,

216 0x0b6000 | 
PTE_P
 | 
PTE_W
,

217 0x0b7000 | 
PTE_P
 | 
PTE_W
,

218 0x0b8000 | 
PTE_P
 | 
PTE_W
,

219 0x0b9000 | 
PTE_P
 | 
PTE_W
,

220 0x0ba000 | 
PTE_P
 | 
PTE_W
,

221 0x0bb000 | 
PTE_P
 | 
PTE_W
,

222 0x0bc000 | 
PTE_P
 | 
PTE_W
,

223 0x0bd000 | 
PTE_P
 | 
PTE_W
,

224 0x0be000 | 
PTE_P
 | 
PTE_W
,

225 0x0bf000 | 
PTE_P
 | 
PTE_W
,

226 0x0c0000 | 
PTE_P
 | 
PTE_W
,

227 0x0c1000 | 
PTE_P
 | 
PTE_W
,

228 0x0c2000 | 
PTE_P
 | 
PTE_W
,

229 0x0c3000 | 
PTE_P
 | 
PTE_W
,

230 0x0c4000 | 
PTE_P
 | 
PTE_W
,

231 0x0c5000 | 
PTE_P
 | 
PTE_W
,

232 0x0c6000 | 
PTE_P
 | 
PTE_W
,

233 0x0c7000 | 
PTE_P
 | 
PTE_W
,

234 0x0c8000 | 
PTE_P
 | 
PTE_W
,

235 0x0c9000 | 
PTE_P
 | 
PTE_W
,

236 0x0ˇ000 | 
PTE_P
 | 
PTE_W
,

237 0x0cb000 | 
PTE_P
 | 
PTE_W
,

238 0x0cc000 | 
PTE_P
 | 
PTE_W
,

239 0x0cd000 | 
PTE_P
 | 
PTE_W
,

240 0x0˚000 | 
PTE_P
 | 
PTE_W
,

241 0x0cf000 | 
PTE_P
 | 
PTE_W
,

242 0x0d0000 | 
PTE_P
 | 
PTE_W
,

243 0x0d1000 | 
PTE_P
 | 
PTE_W
,

244 0x0d2000 | 
PTE_P
 | 
PTE_W
,

245 0x0d3000 | 
PTE_P
 | 
PTE_W
,

246 0x0d4000 | 
PTE_P
 | 
PTE_W
,

247 0x0d5000 | 
PTE_P
 | 
PTE_W
,

248 0x0d6000 | 
PTE_P
 | 
PTE_W
,

249 0x0d7000 | 
PTE_P
 | 
PTE_W
,

250 0x0d8000 | 
PTE_P
 | 
PTE_W
,

251 0x0d9000 | 
PTE_P
 | 
PTE_W
,

252 0x0da000 | 
PTE_P
 | 
PTE_W
,

253 0x0db000 | 
PTE_P
 | 
PTE_W
,

254 0x0dc000 | 
PTE_P
 | 
PTE_W
,

255 0x0dd000 | 
PTE_P
 | 
PTE_W
,

256 0x0de000 | 
PTE_P
 | 
PTE_W
,

257 0x0df000 | 
PTE_P
 | 
PTE_W
,

258 0x0e0000 | 
PTE_P
 | 
PTE_W
,

259 0x0e1000 | 
PTE_P
 | 
PTE_W
,

260 0x0e2000 | 
PTE_P
 | 
PTE_W
,

261 0x0e3000 | 
PTE_P
 | 
PTE_W
,

262 0x0e4000 | 
PTE_P
 | 
PTE_W
,

263 0x0e5000 | 
PTE_P
 | 
PTE_W
,

264 0x0e6000 | 
PTE_P
 | 
PTE_W
,

265 0x0e7000 | 
PTE_P
 | 
PTE_W
,

266 0x0e8000 | 
PTE_P
 | 
PTE_W
,

267 0x0e9000 | 
PTE_P
 | 
PTE_W
,

268 0x0ó000 | 
PTE_P
 | 
PTE_W
,

269 0x0eb000 | 
PTE_P
 | 
PTE_W
,

270 0x0ec000 | 
PTE_P
 | 
PTE_W
,

271 0x0ed000 | 
PTE_P
 | 
PTE_W
,

272 0x0ì000 | 
PTE_P
 | 
PTE_W
,

273 0x0ef000 | 
PTE_P
 | 
PTE_W
,

274 0x0f0000 | 
PTE_P
 | 
PTE_W
,

275 0x0f1000 | 
PTE_P
 | 
PTE_W
,

276 0x0f2000 | 
PTE_P
 | 
PTE_W
,

277 0x0f3000 | 
PTE_P
 | 
PTE_W
,

278 0x0f4000 | 
PTE_P
 | 
PTE_W
,

279 0x0f5000 | 
PTE_P
 | 
PTE_W
,

280 0x0f6000 | 
PTE_P
 | 
PTE_W
,

281 0x0f7000 | 
PTE_P
 | 
PTE_W
,

282 0x0f8000 | 
PTE_P
 | 
PTE_W
,

283 0x0f9000 | 
PTE_P
 | 
PTE_W
,

284 0x0Á000 | 
PTE_P
 | 
PTE_W
,

285 0x0fb000 | 
PTE_P
 | 
PTE_W
,

286 0x0fc000 | 
PTE_P
 | 
PTE_W
,

287 0x0fd000 | 
PTE_P
 | 
PTE_W
,

288 0x0„000 | 
PTE_P
 | 
PTE_W
,

289 0x0ff000 | 
PTE_P
 | 
PTE_W
,

290 0x100000 | 
PTE_P
 | 
PTE_W
,

291 0x101000 | 
PTE_P
 | 
PTE_W
,

292 0x102000 | 
PTE_P
 | 
PTE_W
,

293 0x103000 | 
PTE_P
 | 
PTE_W
,

294 0x104000 | 
PTE_P
 | 
PTE_W
,

295 0x105000 | 
PTE_P
 | 
PTE_W
,

296 0x106000 | 
PTE_P
 | 
PTE_W
,

297 0x107000 | 
PTE_P
 | 
PTE_W
,

298 0x108000 | 
PTE_P
 | 
PTE_W
,

299 0x109000 | 
PTE_P
 | 
PTE_W
,

300 0x10a000 | 
PTE_P
 | 
PTE_W
,

301 0x10b000 | 
PTE_P
 | 
PTE_W
,

302 0x10c000 | 
PTE_P
 | 
PTE_W
,

303 0x10d000 | 
PTE_P
 | 
PTE_W
,

304 0x10e000 | 
PTE_P
 | 
PTE_W
,

305 0x10f000 | 
PTE_P
 | 
PTE_W
,

306 0x110000 | 
PTE_P
 | 
PTE_W
,

307 0x111000 | 
PTE_P
 | 
PTE_W
,

308 0x112000 | 
PTE_P
 | 
PTE_W
,

309 0x113000 | 
PTE_P
 | 
PTE_W
,

310 0x114000 | 
PTE_P
 | 
PTE_W
,

311 0x115000 | 
PTE_P
 | 
PTE_W
,

312 0x116000 | 
PTE_P
 | 
PTE_W
,

313 0x117000 | 
PTE_P
 | 
PTE_W
,

314 0x118000 | 
PTE_P
 | 
PTE_W
,

315 0x119000 | 
PTE_P
 | 
PTE_W
,

316 0x11a000 | 
PTE_P
 | 
PTE_W
,

317 0x11b000 | 
PTE_P
 | 
PTE_W
,

318 0x11c000 | 
PTE_P
 | 
PTE_W
,

319 0x11d000 | 
PTE_P
 | 
PTE_W
,

320 0x11e000 | 
PTE_P
 | 
PTE_W
,

321 0x11f000 | 
PTE_P
 | 
PTE_W
,

322 0x120000 | 
PTE_P
 | 
PTE_W
,

323 0x121000 | 
PTE_P
 | 
PTE_W
,

324 0x122000 | 
PTE_P
 | 
PTE_W
,

325 0x123000 | 
PTE_P
 | 
PTE_W
,

326 0x124000 | 
PTE_P
 | 
PTE_W
,

327 0x125000 | 
PTE_P
 | 
PTE_W
,

328 0x126000 | 
PTE_P
 | 
PTE_W
,

329 0x127000 | 
PTE_P
 | 
PTE_W
,

330 0x128000 | 
PTE_P
 | 
PTE_W
,

331 0x129000 | 
PTE_P
 | 
PTE_W
,

332 0x12a000 | 
PTE_P
 | 
PTE_W
,

333 0x12b000 | 
PTE_P
 | 
PTE_W
,

334 0x12c000 | 
PTE_P
 | 
PTE_W
,

335 0x12d000 | 
PTE_P
 | 
PTE_W
,

336 0x12e000 | 
PTE_P
 | 
PTE_W
,

337 0x12f000 | 
PTE_P
 | 
PTE_W
,

338 0x130000 | 
PTE_P
 | 
PTE_W
,

339 0x131000 | 
PTE_P
 | 
PTE_W
,

340 0x132000 | 
PTE_P
 | 
PTE_W
,

341 0x133000 | 
PTE_P
 | 
PTE_W
,

342 0x134000 | 
PTE_P
 | 
PTE_W
,

343 0x135000 | 
PTE_P
 | 
PTE_W
,

344 0x136000 | 
PTE_P
 | 
PTE_W
,

345 0x137000 | 
PTE_P
 | 
PTE_W
,

346 0x138000 | 
PTE_P
 | 
PTE_W
,

347 0x139000 | 
PTE_P
 | 
PTE_W
,

348 0x13a000 | 
PTE_P
 | 
PTE_W
,

349 0x13b000 | 
PTE_P
 | 
PTE_W
,

350 0x13c000 | 
PTE_P
 | 
PTE_W
,

351 0x13d000 | 
PTE_P
 | 
PTE_W
,

352 0x13e000 | 
PTE_P
 | 
PTE_W
,

353 0x13f000 | 
PTE_P
 | 
PTE_W
,

354 0x140000 | 
PTE_P
 | 
PTE_W
,

355 0x141000 | 
PTE_P
 | 
PTE_W
,

356 0x142000 | 
PTE_P
 | 
PTE_W
,

357 0x143000 | 
PTE_P
 | 
PTE_W
,

358 0x144000 | 
PTE_P
 | 
PTE_W
,

359 0x145000 | 
PTE_P
 | 
PTE_W
,

360 0x146000 | 
PTE_P
 | 
PTE_W
,

361 0x147000 | 
PTE_P
 | 
PTE_W
,

362 0x148000 | 
PTE_P
 | 
PTE_W
,

363 0x149000 | 
PTE_P
 | 
PTE_W
,

364 0x14a000 | 
PTE_P
 | 
PTE_W
,

365 0x14b000 | 
PTE_P
 | 
PTE_W
,

366 0x14c000 | 
PTE_P
 | 
PTE_W
,

367 0x14d000 | 
PTE_P
 | 
PTE_W
,

368 0x14e000 | 
PTE_P
 | 
PTE_W
,

369 0x14f000 | 
PTE_P
 | 
PTE_W
,

370 0x150000 | 
PTE_P
 | 
PTE_W
,

371 0x151000 | 
PTE_P
 | 
PTE_W
,

372 0x152000 | 
PTE_P
 | 
PTE_W
,

373 0x153000 | 
PTE_P
 | 
PTE_W
,

374 0x154000 | 
PTE_P
 | 
PTE_W
,

375 0x155000 | 
PTE_P
 | 
PTE_W
,

376 0x156000 | 
PTE_P
 | 
PTE_W
,

377 0x157000 | 
PTE_P
 | 
PTE_W
,

378 0x158000 | 
PTE_P
 | 
PTE_W
,

379 0x159000 | 
PTE_P
 | 
PTE_W
,

380 0x15a000 | 
PTE_P
 | 
PTE_W
,

381 0x15b000 | 
PTE_P
 | 
PTE_W
,

382 0x15c000 | 
PTE_P
 | 
PTE_W
,

383 0x15d000 | 
PTE_P
 | 
PTE_W
,

384 0x15e000 | 
PTE_P
 | 
PTE_W
,

385 0x15f000 | 
PTE_P
 | 
PTE_W
,

386 0x160000 | 
PTE_P
 | 
PTE_W
,

387 0x161000 | 
PTE_P
 | 
PTE_W
,

388 0x162000 | 
PTE_P
 | 
PTE_W
,

389 0x163000 | 
PTE_P
 | 
PTE_W
,

390 0x164000 | 
PTE_P
 | 
PTE_W
,

391 0x165000 | 
PTE_P
 | 
PTE_W
,

392 0x166000 | 
PTE_P
 | 
PTE_W
,

393 0x167000 | 
PTE_P
 | 
PTE_W
,

394 0x168000 | 
PTE_P
 | 
PTE_W
,

395 0x169000 | 
PTE_P
 | 
PTE_W
,

396 0x16a000 | 
PTE_P
 | 
PTE_W
,

397 0x16b000 | 
PTE_P
 | 
PTE_W
,

398 0x16c000 | 
PTE_P
 | 
PTE_W
,

399 0x16d000 | 
PTE_P
 | 
PTE_W
,

400 0x16e000 | 
PTE_P
 | 
PTE_W
,

401 0x16f000 | 
PTE_P
 | 
PTE_W
,

402 0x170000 | 
PTE_P
 | 
PTE_W
,

403 0x171000 | 
PTE_P
 | 
PTE_W
,

404 0x172000 | 
PTE_P
 | 
PTE_W
,

405 0x173000 | 
PTE_P
 | 
PTE_W
,

406 0x174000 | 
PTE_P
 | 
PTE_W
,

407 0x175000 | 
PTE_P
 | 
PTE_W
,

408 0x176000 | 
PTE_P
 | 
PTE_W
,

409 0x177000 | 
PTE_P
 | 
PTE_W
,

410 0x178000 | 
PTE_P
 | 
PTE_W
,

411 0x179000 | 
PTE_P
 | 
PTE_W
,

412 0x17a000 | 
PTE_P
 | 
PTE_W
,

413 0x17b000 | 
PTE_P
 | 
PTE_W
,

414 0x17c000 | 
PTE_P
 | 
PTE_W
,

415 0x17d000 | 
PTE_P
 | 
PTE_W
,

416 0x17e000 | 
PTE_P
 | 
PTE_W
,

417 0x17f000 | 
PTE_P
 | 
PTE_W
,

418 0x180000 | 
PTE_P
 | 
PTE_W
,

419 0x181000 | 
PTE_P
 | 
PTE_W
,

420 0x182000 | 
PTE_P
 | 
PTE_W
,

421 0x183000 | 
PTE_P
 | 
PTE_W
,

422 0x184000 | 
PTE_P
 | 
PTE_W
,

423 0x185000 | 
PTE_P
 | 
PTE_W
,

424 0x186000 | 
PTE_P
 | 
PTE_W
,

425 0x187000 | 
PTE_P
 | 
PTE_W
,

426 0x188000 | 
PTE_P
 | 
PTE_W
,

427 0x189000 | 
PTE_P
 | 
PTE_W
,

428 0x18a000 | 
PTE_P
 | 
PTE_W
,

429 0x18b000 | 
PTE_P
 | 
PTE_W
,

430 0x18c000 | 
PTE_P
 | 
PTE_W
,

431 0x18d000 | 
PTE_P
 | 
PTE_W
,

432 0x18e000 | 
PTE_P
 | 
PTE_W
,

433 0x18f000 | 
PTE_P
 | 
PTE_W
,

434 0x190000 | 
PTE_P
 | 
PTE_W
,

435 0x191000 | 
PTE_P
 | 
PTE_W
,

436 0x192000 | 
PTE_P
 | 
PTE_W
,

437 0x193000 | 
PTE_P
 | 
PTE_W
,

438 0x194000 | 
PTE_P
 | 
PTE_W
,

439 0x195000 | 
PTE_P
 | 
PTE_W
,

440 0x196000 | 
PTE_P
 | 
PTE_W
,

441 0x197000 | 
PTE_P
 | 
PTE_W
,

442 0x198000 | 
PTE_P
 | 
PTE_W
,

443 0x199000 | 
PTE_P
 | 
PTE_W
,

444 0x19a000 | 
PTE_P
 | 
PTE_W
,

445 0x19b000 | 
PTE_P
 | 
PTE_W
,

446 0x19c000 | 
PTE_P
 | 
PTE_W
,

447 0x19d000 | 
PTE_P
 | 
PTE_W
,

448 0x19e000 | 
PTE_P
 | 
PTE_W
,

449 0x19f000 | 
PTE_P
 | 
PTE_W
,

450 0x1a0000 | 
PTE_P
 | 
PTE_W
,

451 0x1a1000 | 
PTE_P
 | 
PTE_W
,

452 0x1a2000 | 
PTE_P
 | 
PTE_W
,

453 0x1a3000 | 
PTE_P
 | 
PTE_W
,

454 0x1a4000 | 
PTE_P
 | 
PTE_W
,

455 0x1a5000 | 
PTE_P
 | 
PTE_W
,

456 0x1a6000 | 
PTE_P
 | 
PTE_W
,

457 0x1a7000 | 
PTE_P
 | 
PTE_W
,

458 0x1a8000 | 
PTE_P
 | 
PTE_W
,

459 0x1a9000 | 
PTE_P
 | 
PTE_W
,

460 0x1Ø000 | 
PTE_P
 | 
PTE_W
,

461 0x1ab000 | 
PTE_P
 | 
PTE_W
,

462 0x1ac000 | 
PTE_P
 | 
PTE_W
,

463 0x1ad000 | 
PTE_P
 | 
PTE_W
,

464 0x1´000 | 
PTE_P
 | 
PTE_W
,

465 0x1af000 | 
PTE_P
 | 
PTE_W
,

466 0x1b0000 | 
PTE_P
 | 
PTE_W
,

467 0x1b1000 | 
PTE_P
 | 
PTE_W
,

468 0x1b2000 | 
PTE_P
 | 
PTE_W
,

469 0x1b3000 | 
PTE_P
 | 
PTE_W
,

470 0x1b4000 | 
PTE_P
 | 
PTE_W
,

471 0x1b5000 | 
PTE_P
 | 
PTE_W
,

472 0x1b6000 | 
PTE_P
 | 
PTE_W
,

473 0x1b7000 | 
PTE_P
 | 
PTE_W
,

474 0x1b8000 | 
PTE_P
 | 
PTE_W
,

475 0x1b9000 | 
PTE_P
 | 
PTE_W
,

476 0x1ba000 | 
PTE_P
 | 
PTE_W
,

477 0x1bb000 | 
PTE_P
 | 
PTE_W
,

478 0x1bc000 | 
PTE_P
 | 
PTE_W
,

479 0x1bd000 | 
PTE_P
 | 
PTE_W
,

480 0x1be000 | 
PTE_P
 | 
PTE_W
,

481 0x1bf000 | 
PTE_P
 | 
PTE_W
,

482 0x1c0000 | 
PTE_P
 | 
PTE_W
,

483 0x1c1000 | 
PTE_P
 | 
PTE_W
,

484 0x1c2000 | 
PTE_P
 | 
PTE_W
,

485 0x1c3000 | 
PTE_P
 | 
PTE_W
,

486 0x1c4000 | 
PTE_P
 | 
PTE_W
,

487 0x1c5000 | 
PTE_P
 | 
PTE_W
,

488 0x1c6000 | 
PTE_P
 | 
PTE_W
,

489 0x1c7000 | 
PTE_P
 | 
PTE_W
,

490 0x1c8000 | 
PTE_P
 | 
PTE_W
,

491 0x1c9000 | 
PTE_P
 | 
PTE_W
,

492 0x1ˇ000 | 
PTE_P
 | 
PTE_W
,

493 0x1cb000 | 
PTE_P
 | 
PTE_W
,

494 0x1cc000 | 
PTE_P
 | 
PTE_W
,

495 0x1cd000 | 
PTE_P
 | 
PTE_W
,

496 0x1˚000 | 
PTE_P
 | 
PTE_W
,

497 0x1cf000 | 
PTE_P
 | 
PTE_W
,

498 0x1d0000 | 
PTE_P
 | 
PTE_W
,

499 0x1d1000 | 
PTE_P
 | 
PTE_W
,

500 0x1d2000 | 
PTE_P
 | 
PTE_W
,

501 0x1d3000 | 
PTE_P
 | 
PTE_W
,

502 0x1d4000 | 
PTE_P
 | 
PTE_W
,

503 0x1d5000 | 
PTE_P
 | 
PTE_W
,

504 0x1d6000 | 
PTE_P
 | 
PTE_W
,

505 0x1d7000 | 
PTE_P
 | 
PTE_W
,

506 0x1d8000 | 
PTE_P
 | 
PTE_W
,

507 0x1d9000 | 
PTE_P
 | 
PTE_W
,

508 0x1da000 | 
PTE_P
 | 
PTE_W
,

509 0x1db000 | 
PTE_P
 | 
PTE_W
,

510 0x1dc000 | 
PTE_P
 | 
PTE_W
,

511 0x1dd000 | 
PTE_P
 | 
PTE_W
,

512 0x1de000 | 
PTE_P
 | 
PTE_W
,

513 0x1df000 | 
PTE_P
 | 
PTE_W
,

514 0x1e0000 | 
PTE_P
 | 
PTE_W
,

515 0x1e1000 | 
PTE_P
 | 
PTE_W
,

516 0x1e2000 | 
PTE_P
 | 
PTE_W
,

517 0x1e3000 | 
PTE_P
 | 
PTE_W
,

518 0x1e4000 | 
PTE_P
 | 
PTE_W
,

519 0x1e5000 | 
PTE_P
 | 
PTE_W
,

520 0x1e6000 | 
PTE_P
 | 
PTE_W
,

521 0x1e7000 | 
PTE_P
 | 
PTE_W
,

522 0x1e8000 | 
PTE_P
 | 
PTE_W
,

523 0x1e9000 | 
PTE_P
 | 
PTE_W
,

524 0x1ó000 | 
PTE_P
 | 
PTE_W
,

525 0x1eb000 | 
PTE_P
 | 
PTE_W
,

526 0x1ec000 | 
PTE_P
 | 
PTE_W
,

527 0x1ed000 | 
PTE_P
 | 
PTE_W
,

528 0x1ì000 | 
PTE_P
 | 
PTE_W
,

529 0x1ef000 | 
PTE_P
 | 
PTE_W
,

530 0x1f0000 | 
PTE_P
 | 
PTE_W
,

531 0x1f1000 | 
PTE_P
 | 
PTE_W
,

532 0x1f2000 | 
PTE_P
 | 
PTE_W
,

533 0x1f3000 | 
PTE_P
 | 
PTE_W
,

534 0x1f4000 | 
PTE_P
 | 
PTE_W
,

535 0x1f5000 | 
PTE_P
 | 
PTE_W
,

536 0x1f6000 | 
PTE_P
 | 
PTE_W
,

537 0x1f7000 | 
PTE_P
 | 
PTE_W
,

538 0x1f8000 | 
PTE_P
 | 
PTE_W
,

539 0x1f9000 | 
PTE_P
 | 
PTE_W
,

540 0x1Á000 | 
PTE_P
 | 
PTE_W
,

541 0x1fb000 | 
PTE_P
 | 
PTE_W
,

542 0x1fc000 | 
PTE_P
 | 
PTE_W
,

543 0x1fd000 | 
PTE_P
 | 
PTE_W
,

544 0x1„000 | 
PTE_P
 | 
PTE_W
,

545 0x1ff000 | 
PTE_P
 | 
PTE_W
,

546 0x200000 | 
PTE_P
 | 
PTE_W
,

547 0x201000 | 
PTE_P
 | 
PTE_W
,

548 0x202000 | 
PTE_P
 | 
PTE_W
,

549 0x203000 | 
PTE_P
 | 
PTE_W
,

550 0x204000 | 
PTE_P
 | 
PTE_W
,

551 0x205000 | 
PTE_P
 | 
PTE_W
,

552 0x206000 | 
PTE_P
 | 
PTE_W
,

553 0x207000 | 
PTE_P
 | 
PTE_W
,

554 0x208000 | 
PTE_P
 | 
PTE_W
,

555 0x209000 | 
PTE_P
 | 
PTE_W
,

556 0x20a000 | 
PTE_P
 | 
PTE_W
,

557 0x20b000 | 
PTE_P
 | 
PTE_W
,

558 0x20c000 | 
PTE_P
 | 
PTE_W
,

559 0x20d000 | 
PTE_P
 | 
PTE_W
,

560 0x20e000 | 
PTE_P
 | 
PTE_W
,

561 0x20f000 | 
PTE_P
 | 
PTE_W
,

562 0x210000 | 
PTE_P
 | 
PTE_W
,

563 0x211000 | 
PTE_P
 | 
PTE_W
,

564 0x212000 | 
PTE_P
 | 
PTE_W
,

565 0x213000 | 
PTE_P
 | 
PTE_W
,

566 0x214000 | 
PTE_P
 | 
PTE_W
,

567 0x215000 | 
PTE_P
 | 
PTE_W
,

568 0x216000 | 
PTE_P
 | 
PTE_W
,

569 0x217000 | 
PTE_P
 | 
PTE_W
,

570 0x218000 | 
PTE_P
 | 
PTE_W
,

571 0x219000 | 
PTE_P
 | 
PTE_W
,

572 0x21a000 | 
PTE_P
 | 
PTE_W
,

573 0x21b000 | 
PTE_P
 | 
PTE_W
,

574 0x21c000 | 
PTE_P
 | 
PTE_W
,

575 0x21d000 | 
PTE_P
 | 
PTE_W
,

576 0x21e000 | 
PTE_P
 | 
PTE_W
,

577 0x21f000 | 
PTE_P
 | 
PTE_W
,

578 0x220000 | 
PTE_P
 | 
PTE_W
,

579 0x221000 | 
PTE_P
 | 
PTE_W
,

580 0x222000 | 
PTE_P
 | 
PTE_W
,

581 0x223000 | 
PTE_P
 | 
PTE_W
,

582 0x224000 | 
PTE_P
 | 
PTE_W
,

583 0x225000 | 
PTE_P
 | 
PTE_W
,

584 0x226000 | 
PTE_P
 | 
PTE_W
,

585 0x227000 | 
PTE_P
 | 
PTE_W
,

586 0x228000 | 
PTE_P
 | 
PTE_W
,

587 0x229000 | 
PTE_P
 | 
PTE_W
,

588 0x22a000 | 
PTE_P
 | 
PTE_W
,

589 0x22b000 | 
PTE_P
 | 
PTE_W
,

590 0x22c000 | 
PTE_P
 | 
PTE_W
,

591 0x22d000 | 
PTE_P
 | 
PTE_W
,

592 0x22e000 | 
PTE_P
 | 
PTE_W
,

593 0x22f000 | 
PTE_P
 | 
PTE_W
,

594 0x230000 | 
PTE_P
 | 
PTE_W
,

595 0x231000 | 
PTE_P
 | 
PTE_W
,

596 0x232000 | 
PTE_P
 | 
PTE_W
,

597 0x233000 | 
PTE_P
 | 
PTE_W
,

598 0x234000 | 
PTE_P
 | 
PTE_W
,

599 0x235000 | 
PTE_P
 | 
PTE_W
,

600 0x236000 | 
PTE_P
 | 
PTE_W
,

601 0x237000 | 
PTE_P
 | 
PTE_W
,

602 0x238000 | 
PTE_P
 | 
PTE_W
,

603 0x239000 | 
PTE_P
 | 
PTE_W
,

604 0x23a000 | 
PTE_P
 | 
PTE_W
,

605 0x23b000 | 
PTE_P
 | 
PTE_W
,

606 0x23c000 | 
PTE_P
 | 
PTE_W
,

607 0x23d000 | 
PTE_P
 | 
PTE_W
,

608 0x23e000 | 
PTE_P
 | 
PTE_W
,

609 0x23f000 | 
PTE_P
 | 
PTE_W
,

610 0x240000 | 
PTE_P
 | 
PTE_W
,

611 0x241000 | 
PTE_P
 | 
PTE_W
,

612 0x242000 | 
PTE_P
 | 
PTE_W
,

613 0x243000 | 
PTE_P
 | 
PTE_W
,

614 0x244000 | 
PTE_P
 | 
PTE_W
,

615 0x245000 | 
PTE_P
 | 
PTE_W
,

616 0x246000 | 
PTE_P
 | 
PTE_W
,

617 0x247000 | 
PTE_P
 | 
PTE_W
,

618 0x248000 | 
PTE_P
 | 
PTE_W
,

619 0x249000 | 
PTE_P
 | 
PTE_W
,

620 0x24a000 | 
PTE_P
 | 
PTE_W
,

621 0x24b000 | 
PTE_P
 | 
PTE_W
,

622 0x24c000 | 
PTE_P
 | 
PTE_W
,

623 0x24d000 | 
PTE_P
 | 
PTE_W
,

624 0x24e000 | 
PTE_P
 | 
PTE_W
,

625 0x24f000 | 
PTE_P
 | 
PTE_W
,

626 0x250000 | 
PTE_P
 | 
PTE_W
,

627 0x251000 | 
PTE_P
 | 
PTE_W
,

628 0x252000 | 
PTE_P
 | 
PTE_W
,

629 0x253000 | 
PTE_P
 | 
PTE_W
,

630 0x254000 | 
PTE_P
 | 
PTE_W
,

631 0x255000 | 
PTE_P
 | 
PTE_W
,

632 0x256000 | 
PTE_P
 | 
PTE_W
,

633 0x257000 | 
PTE_P
 | 
PTE_W
,

634 0x258000 | 
PTE_P
 | 
PTE_W
,

635 0x259000 | 
PTE_P
 | 
PTE_W
,

636 0x25a000 | 
PTE_P
 | 
PTE_W
,

637 0x25b000 | 
PTE_P
 | 
PTE_W
,

638 0x25c000 | 
PTE_P
 | 
PTE_W
,

639 0x25d000 | 
PTE_P
 | 
PTE_W
,

640 0x25e000 | 
PTE_P
 | 
PTE_W
,

641 0x25f000 | 
PTE_P
 | 
PTE_W
,

642 0x260000 | 
PTE_P
 | 
PTE_W
,

643 0x261000 | 
PTE_P
 | 
PTE_W
,

644 0x262000 | 
PTE_P
 | 
PTE_W
,

645 0x263000 | 
PTE_P
 | 
PTE_W
,

646 0x264000 | 
PTE_P
 | 
PTE_W
,

647 0x265000 | 
PTE_P
 | 
PTE_W
,

648 0x266000 | 
PTE_P
 | 
PTE_W
,

649 0x267000 | 
PTE_P
 | 
PTE_W
,

650 0x268000 | 
PTE_P
 | 
PTE_W
,

651 0x269000 | 
PTE_P
 | 
PTE_W
,

652 0x26a000 | 
PTE_P
 | 
PTE_W
,

653 0x26b000 | 
PTE_P
 | 
PTE_W
,

654 0x26c000 | 
PTE_P
 | 
PTE_W
,

655 0x26d000 | 
PTE_P
 | 
PTE_W
,

656 0x26e000 | 
PTE_P
 | 
PTE_W
,

657 0x26f000 | 
PTE_P
 | 
PTE_W
,

658 0x270000 | 
PTE_P
 | 
PTE_W
,

659 0x271000 | 
PTE_P
 | 
PTE_W
,

660 0x272000 | 
PTE_P
 | 
PTE_W
,

661 0x273000 | 
PTE_P
 | 
PTE_W
,

662 0x274000 | 
PTE_P
 | 
PTE_W
,

663 0x275000 | 
PTE_P
 | 
PTE_W
,

664 0x276000 | 
PTE_P
 | 
PTE_W
,

665 0x277000 | 
PTE_P
 | 
PTE_W
,

666 0x278000 | 
PTE_P
 | 
PTE_W
,

667 0x279000 | 
PTE_P
 | 
PTE_W
,

668 0x27a000 | 
PTE_P
 | 
PTE_W
,

669 0x27b000 | 
PTE_P
 | 
PTE_W
,

670 0x27c000 | 
PTE_P
 | 
PTE_W
,

671 0x27d000 | 
PTE_P
 | 
PTE_W
,

672 0x27e000 | 
PTE_P
 | 
PTE_W
,

673 0x27f000 | 
PTE_P
 | 
PTE_W
,

674 0x280000 | 
PTE_P
 | 
PTE_W
,

675 0x281000 | 
PTE_P
 | 
PTE_W
,

676 0x282000 | 
PTE_P
 | 
PTE_W
,

677 0x283000 | 
PTE_P
 | 
PTE_W
,

678 0x284000 | 
PTE_P
 | 
PTE_W
,

679 0x285000 | 
PTE_P
 | 
PTE_W
,

680 0x286000 | 
PTE_P
 | 
PTE_W
,

681 0x287000 | 
PTE_P
 | 
PTE_W
,

682 0x288000 | 
PTE_P
 | 
PTE_W
,

683 0x289000 | 
PTE_P
 | 
PTE_W
,

684 0x28a000 | 
PTE_P
 | 
PTE_W
,

685 0x28b000 | 
PTE_P
 | 
PTE_W
,

686 0x28c000 | 
PTE_P
 | 
PTE_W
,

687 0x28d000 | 
PTE_P
 | 
PTE_W
,

688 0x28e000 | 
PTE_P
 | 
PTE_W
,

689 0x28f000 | 
PTE_P
 | 
PTE_W
,

690 0x290000 | 
PTE_P
 | 
PTE_W
,

691 0x291000 | 
PTE_P
 | 
PTE_W
,

692 0x292000 | 
PTE_P
 | 
PTE_W
,

693 0x293000 | 
PTE_P
 | 
PTE_W
,

694 0x294000 | 
PTE_P
 | 
PTE_W
,

695 0x295000 | 
PTE_P
 | 
PTE_W
,

696 0x296000 | 
PTE_P
 | 
PTE_W
,

697 0x297000 | 
PTE_P
 | 
PTE_W
,

698 0x298000 | 
PTE_P
 | 
PTE_W
,

699 0x299000 | 
PTE_P
 | 
PTE_W
,

700 0x29a000 | 
PTE_P
 | 
PTE_W
,

701 0x29b000 | 
PTE_P
 | 
PTE_W
,

702 0x29c000 | 
PTE_P
 | 
PTE_W
,

703 0x29d000 | 
PTE_P
 | 
PTE_W
,

704 0x29e000 | 
PTE_P
 | 
PTE_W
,

705 0x29f000 | 
PTE_P
 | 
PTE_W
,

706 0x2a0000 | 
PTE_P
 | 
PTE_W
,

707 0x2a1000 | 
PTE_P
 | 
PTE_W
,

708 0x2a2000 | 
PTE_P
 | 
PTE_W
,

709 0x2a3000 | 
PTE_P
 | 
PTE_W
,

710 0x2a4000 | 
PTE_P
 | 
PTE_W
,

711 0x2a5000 | 
PTE_P
 | 
PTE_W
,

712 0x2a6000 | 
PTE_P
 | 
PTE_W
,

713 0x2a7000 | 
PTE_P
 | 
PTE_W
,

714 0x2a8000 | 
PTE_P
 | 
PTE_W
,

715 0x2a9000 | 
PTE_P
 | 
PTE_W
,

716 0x2Ø000 | 
PTE_P
 | 
PTE_W
,

717 0x2ab000 | 
PTE_P
 | 
PTE_W
,

718 0x2ac000 | 
PTE_P
 | 
PTE_W
,

719 0x2ad000 | 
PTE_P
 | 
PTE_W
,

720 0x2´000 | 
PTE_P
 | 
PTE_W
,

721 0x2af000 | 
PTE_P
 | 
PTE_W
,

722 0x2b0000 | 
PTE_P
 | 
PTE_W
,

723 0x2b1000 | 
PTE_P
 | 
PTE_W
,

724 0x2b2000 | 
PTE_P
 | 
PTE_W
,

725 0x2b3000 | 
PTE_P
 | 
PTE_W
,

726 0x2b4000 | 
PTE_P
 | 
PTE_W
,

727 0x2b5000 | 
PTE_P
 | 
PTE_W
,

728 0x2b6000 | 
PTE_P
 | 
PTE_W
,

729 0x2b7000 | 
PTE_P
 | 
PTE_W
,

730 0x2b8000 | 
PTE_P
 | 
PTE_W
,

731 0x2b9000 | 
PTE_P
 | 
PTE_W
,

732 0x2ba000 | 
PTE_P
 | 
PTE_W
,

733 0x2bb000 | 
PTE_P
 | 
PTE_W
,

734 0x2bc000 | 
PTE_P
 | 
PTE_W
,

735 0x2bd000 | 
PTE_P
 | 
PTE_W
,

736 0x2be000 | 
PTE_P
 | 
PTE_W
,

737 0x2bf000 | 
PTE_P
 | 
PTE_W
,

738 0x2c0000 | 
PTE_P
 | 
PTE_W
,

739 0x2c1000 | 
PTE_P
 | 
PTE_W
,

740 0x2c2000 | 
PTE_P
 | 
PTE_W
,

741 0x2c3000 | 
PTE_P
 | 
PTE_W
,

742 0x2c4000 | 
PTE_P
 | 
PTE_W
,

743 0x2c5000 | 
PTE_P
 | 
PTE_W
,

744 0x2c6000 | 
PTE_P
 | 
PTE_W
,

745 0x2c7000 | 
PTE_P
 | 
PTE_W
,

746 0x2c8000 | 
PTE_P
 | 
PTE_W
,

747 0x2c9000 | 
PTE_P
 | 
PTE_W
,

748 0x2ˇ000 | 
PTE_P
 | 
PTE_W
,

749 0x2cb000 | 
PTE_P
 | 
PTE_W
,

750 0x2cc000 | 
PTE_P
 | 
PTE_W
,

751 0x2cd000 | 
PTE_P
 | 
PTE_W
,

752 0x2˚000 | 
PTE_P
 | 
PTE_W
,

753 0x2cf000 | 
PTE_P
 | 
PTE_W
,

754 0x2d0000 | 
PTE_P
 | 
PTE_W
,

755 0x2d1000 | 
PTE_P
 | 
PTE_W
,

756 0x2d2000 | 
PTE_P
 | 
PTE_W
,

757 0x2d3000 | 
PTE_P
 | 
PTE_W
,

758 0x2d4000 | 
PTE_P
 | 
PTE_W
,

759 0x2d5000 | 
PTE_P
 | 
PTE_W
,

760 0x2d6000 | 
PTE_P
 | 
PTE_W
,

761 0x2d7000 | 
PTE_P
 | 
PTE_W
,

762 0x2d8000 | 
PTE_P
 | 
PTE_W
,

763 0x2d9000 | 
PTE_P
 | 
PTE_W
,

764 0x2da000 | 
PTE_P
 | 
PTE_W
,

765 0x2db000 | 
PTE_P
 | 
PTE_W
,

766 0x2dc000 | 
PTE_P
 | 
PTE_W
,

767 0x2dd000 | 
PTE_P
 | 
PTE_W
,

768 0x2de000 | 
PTE_P
 | 
PTE_W
,

769 0x2df000 | 
PTE_P
 | 
PTE_W
,

770 0x2e0000 | 
PTE_P
 | 
PTE_W
,

771 0x2e1000 | 
PTE_P
 | 
PTE_W
,

772 0x2e2000 | 
PTE_P
 | 
PTE_W
,

773 0x2e3000 | 
PTE_P
 | 
PTE_W
,

774 0x2e4000 | 
PTE_P
 | 
PTE_W
,

775 0x2e5000 | 
PTE_P
 | 
PTE_W
,

776 0x2e6000 | 
PTE_P
 | 
PTE_W
,

777 0x2e7000 | 
PTE_P
 | 
PTE_W
,

778 0x2e8000 | 
PTE_P
 | 
PTE_W
,

779 0x2e9000 | 
PTE_P
 | 
PTE_W
,

780 0x2ó000 | 
PTE_P
 | 
PTE_W
,

781 0x2eb000 | 
PTE_P
 | 
PTE_W
,

782 0x2ec000 | 
PTE_P
 | 
PTE_W
,

783 0x2ed000 | 
PTE_P
 | 
PTE_W
,

784 0x2ì000 | 
PTE_P
 | 
PTE_W
,

785 0x2ef000 | 
PTE_P
 | 
PTE_W
,

786 0x2f0000 | 
PTE_P
 | 
PTE_W
,

787 0x2f1000 | 
PTE_P
 | 
PTE_W
,

788 0x2f2000 | 
PTE_P
 | 
PTE_W
,

789 0x2f3000 | 
PTE_P
 | 
PTE_W
,

790 0x2f4000 | 
PTE_P
 | 
PTE_W
,

791 0x2f5000 | 
PTE_P
 | 
PTE_W
,

792 0x2f6000 | 
PTE_P
 | 
PTE_W
,

793 0x2f7000 | 
PTE_P
 | 
PTE_W
,

794 0x2f8000 | 
PTE_P
 | 
PTE_W
,

795 0x2f9000 | 
PTE_P
 | 
PTE_W
,

796 0x2Á000 | 
PTE_P
 | 
PTE_W
,

797 0x2fb000 | 
PTE_P
 | 
PTE_W
,

798 0x2fc000 | 
PTE_P
 | 
PTE_W
,

799 0x2fd000 | 
PTE_P
 | 
PTE_W
,

800 0x2„000 | 
PTE_P
 | 
PTE_W
,

801 0x2ff000 | 
PTE_P
 | 
PTE_W
,

802 0x300000 | 
PTE_P
 | 
PTE_W
,

803 0x301000 | 
PTE_P
 | 
PTE_W
,

804 0x302000 | 
PTE_P
 | 
PTE_W
,

805 0x303000 | 
PTE_P
 | 
PTE_W
,

806 0x304000 | 
PTE_P
 | 
PTE_W
,

807 0x305000 | 
PTE_P
 | 
PTE_W
,

808 0x306000 | 
PTE_P
 | 
PTE_W
,

809 0x307000 | 
PTE_P
 | 
PTE_W
,

810 0x308000 | 
PTE_P
 | 
PTE_W
,

811 0x309000 | 
PTE_P
 | 
PTE_W
,

812 0x30a000 | 
PTE_P
 | 
PTE_W
,

813 0x30b000 | 
PTE_P
 | 
PTE_W
,

814 0x30c000 | 
PTE_P
 | 
PTE_W
,

815 0x30d000 | 
PTE_P
 | 
PTE_W
,

816 0x30e000 | 
PTE_P
 | 
PTE_W
,

817 0x30f000 | 
PTE_P
 | 
PTE_W
,

818 0x310000 | 
PTE_P
 | 
PTE_W
,

819 0x311000 | 
PTE_P
 | 
PTE_W
,

820 0x312000 | 
PTE_P
 | 
PTE_W
,

821 0x313000 | 
PTE_P
 | 
PTE_W
,

822 0x314000 | 
PTE_P
 | 
PTE_W
,

823 0x315000 | 
PTE_P
 | 
PTE_W
,

824 0x316000 | 
PTE_P
 | 
PTE_W
,

825 0x317000 | 
PTE_P
 | 
PTE_W
,

826 0x318000 | 
PTE_P
 | 
PTE_W
,

827 0x319000 | 
PTE_P
 | 
PTE_W
,

828 0x31a000 | 
PTE_P
 | 
PTE_W
,

829 0x31b000 | 
PTE_P
 | 
PTE_W
,

830 0x31c000 | 
PTE_P
 | 
PTE_W
,

831 0x31d000 | 
PTE_P
 | 
PTE_W
,

832 0x31e000 | 
PTE_P
 | 
PTE_W
,

833 0x31f000 | 
PTE_P
 | 
PTE_W
,

834 0x320000 | 
PTE_P
 | 
PTE_W
,

835 0x321000 | 
PTE_P
 | 
PTE_W
,

836 0x322000 | 
PTE_P
 | 
PTE_W
,

837 0x323000 | 
PTE_P
 | 
PTE_W
,

838 0x324000 | 
PTE_P
 | 
PTE_W
,

839 0x325000 | 
PTE_P
 | 
PTE_W
,

840 0x326000 | 
PTE_P
 | 
PTE_W
,

841 0x327000 | 
PTE_P
 | 
PTE_W
,

842 0x328000 | 
PTE_P
 | 
PTE_W
,

843 0x329000 | 
PTE_P
 | 
PTE_W
,

844 0x32a000 | 
PTE_P
 | 
PTE_W
,

845 0x32b000 | 
PTE_P
 | 
PTE_W
,

846 0x32c000 | 
PTE_P
 | 
PTE_W
,

847 0x32d000 | 
PTE_P
 | 
PTE_W
,

848 0x32e000 | 
PTE_P
 | 
PTE_W
,

849 0x32f000 | 
PTE_P
 | 
PTE_W
,

850 0x330000 | 
PTE_P
 | 
PTE_W
,

851 0x331000 | 
PTE_P
 | 
PTE_W
,

852 0x332000 | 
PTE_P
 | 
PTE_W
,

853 0x333000 | 
PTE_P
 | 
PTE_W
,

854 0x334000 | 
PTE_P
 | 
PTE_W
,

855 0x335000 | 
PTE_P
 | 
PTE_W
,

856 0x336000 | 
PTE_P
 | 
PTE_W
,

857 0x337000 | 
PTE_P
 | 
PTE_W
,

858 0x338000 | 
PTE_P
 | 
PTE_W
,

859 0x339000 | 
PTE_P
 | 
PTE_W
,

860 0x33a000 | 
PTE_P
 | 
PTE_W
,

861 0x33b000 | 
PTE_P
 | 
PTE_W
,

862 0x33c000 | 
PTE_P
 | 
PTE_W
,

863 0x33d000 | 
PTE_P
 | 
PTE_W
,

864 0x33e000 | 
PTE_P
 | 
PTE_W
,

865 0x33f000 | 
PTE_P
 | 
PTE_W
,

866 0x340000 | 
PTE_P
 | 
PTE_W
,

867 0x341000 | 
PTE_P
 | 
PTE_W
,

868 0x342000 | 
PTE_P
 | 
PTE_W
,

869 0x343000 | 
PTE_P
 | 
PTE_W
,

870 0x344000 | 
PTE_P
 | 
PTE_W
,

871 0x345000 | 
PTE_P
 | 
PTE_W
,

872 0x346000 | 
PTE_P
 | 
PTE_W
,

873 0x347000 | 
PTE_P
 | 
PTE_W
,

874 0x348000 | 
PTE_P
 | 
PTE_W
,

875 0x349000 | 
PTE_P
 | 
PTE_W
,

876 0x34a000 | 
PTE_P
 | 
PTE_W
,

877 0x34b000 | 
PTE_P
 | 
PTE_W
,

878 0x34c000 | 
PTE_P
 | 
PTE_W
,

879 0x34d000 | 
PTE_P
 | 
PTE_W
,

880 0x34e000 | 
PTE_P
 | 
PTE_W
,

881 0x34f000 | 
PTE_P
 | 
PTE_W
,

882 0x350000 | 
PTE_P
 | 
PTE_W
,

883 0x351000 | 
PTE_P
 | 
PTE_W
,

884 0x352000 | 
PTE_P
 | 
PTE_W
,

885 0x353000 | 
PTE_P
 | 
PTE_W
,

886 0x354000 | 
PTE_P
 | 
PTE_W
,

887 0x355000 | 
PTE_P
 | 
PTE_W
,

888 0x356000 | 
PTE_P
 | 
PTE_W
,

889 0x357000 | 
PTE_P
 | 
PTE_W
,

890 0x358000 | 
PTE_P
 | 
PTE_W
,

891 0x359000 | 
PTE_P
 | 
PTE_W
,

892 0x35a000 | 
PTE_P
 | 
PTE_W
,

893 0x35b000 | 
PTE_P
 | 
PTE_W
,

894 0x35c000 | 
PTE_P
 | 
PTE_W
,

895 0x35d000 | 
PTE_P
 | 
PTE_W
,

896 0x35e000 | 
PTE_P
 | 
PTE_W
,

897 0x35f000 | 
PTE_P
 | 
PTE_W
,

898 0x360000 | 
PTE_P
 | 
PTE_W
,

899 0x361000 | 
PTE_P
 | 
PTE_W
,

900 0x362000 | 
PTE_P
 | 
PTE_W
,

901 0x363000 | 
PTE_P
 | 
PTE_W
,

902 0x364000 | 
PTE_P
 | 
PTE_W
,

903 0x365000 | 
PTE_P
 | 
PTE_W
,

904 0x366000 | 
PTE_P
 | 
PTE_W
,

905 0x367000 | 
PTE_P
 | 
PTE_W
,

906 0x368000 | 
PTE_P
 | 
PTE_W
,

907 0x369000 | 
PTE_P
 | 
PTE_W
,

908 0x36a000 | 
PTE_P
 | 
PTE_W
,

909 0x36b000 | 
PTE_P
 | 
PTE_W
,

910 0x36c000 | 
PTE_P
 | 
PTE_W
,

911 0x36d000 | 
PTE_P
 | 
PTE_W
,

912 0x36e000 | 
PTE_P
 | 
PTE_W
,

913 0x36f000 | 
PTE_P
 | 
PTE_W
,

914 0x370000 | 
PTE_P
 | 
PTE_W
,

915 0x371000 | 
PTE_P
 | 
PTE_W
,

916 0x372000 | 
PTE_P
 | 
PTE_W
,

917 0x373000 | 
PTE_P
 | 
PTE_W
,

918 0x374000 | 
PTE_P
 | 
PTE_W
,

919 0x375000 | 
PTE_P
 | 
PTE_W
,

920 0x376000 | 
PTE_P
 | 
PTE_W
,

921 0x377000 | 
PTE_P
 | 
PTE_W
,

922 0x378000 | 
PTE_P
 | 
PTE_W
,

923 0x379000 | 
PTE_P
 | 
PTE_W
,

924 0x37a000 | 
PTE_P
 | 
PTE_W
,

925 0x37b000 | 
PTE_P
 | 
PTE_W
,

926 0x37c000 | 
PTE_P
 | 
PTE_W
,

927 0x37d000 | 
PTE_P
 | 
PTE_W
,

928 0x37e000 | 
PTE_P
 | 
PTE_W
,

929 0x37f000 | 
PTE_P
 | 
PTE_W
,

930 0x380000 | 
PTE_P
 | 
PTE_W
,

931 0x381000 | 
PTE_P
 | 
PTE_W
,

932 0x382000 | 
PTE_P
 | 
PTE_W
,

933 0x383000 | 
PTE_P
 | 
PTE_W
,

934 0x384000 | 
PTE_P
 | 
PTE_W
,

935 0x385000 | 
PTE_P
 | 
PTE_W
,

936 0x386000 | 
PTE_P
 | 
PTE_W
,

937 0x387000 | 
PTE_P
 | 
PTE_W
,

938 0x388000 | 
PTE_P
 | 
PTE_W
,

939 0x389000 | 
PTE_P
 | 
PTE_W
,

940 0x38a000 | 
PTE_P
 | 
PTE_W
,

941 0x38b000 | 
PTE_P
 | 
PTE_W
,

942 0x38c000 | 
PTE_P
 | 
PTE_W
,

943 0x38d000 | 
PTE_P
 | 
PTE_W
,

944 0x38e000 | 
PTE_P
 | 
PTE_W
,

945 0x38f000 | 
PTE_P
 | 
PTE_W
,

946 0x390000 | 
PTE_P
 | 
PTE_W
,

947 0x391000 | 
PTE_P
 | 
PTE_W
,

948 0x392000 | 
PTE_P
 | 
PTE_W
,

949 0x393000 | 
PTE_P
 | 
PTE_W
,

950 0x394000 | 
PTE_P
 | 
PTE_W
,

951 0x395000 | 
PTE_P
 | 
PTE_W
,

952 0x396000 | 
PTE_P
 | 
PTE_W
,

953 0x397000 | 
PTE_P
 | 
PTE_W
,

954 0x398000 | 
PTE_P
 | 
PTE_W
,

955 0x399000 | 
PTE_P
 | 
PTE_W
,

956 0x39a000 | 
PTE_P
 | 
PTE_W
,

957 0x39b000 | 
PTE_P
 | 
PTE_W
,

958 0x39c000 | 
PTE_P
 | 
PTE_W
,

959 0x39d000 | 
PTE_P
 | 
PTE_W
,

960 0x39e000 | 
PTE_P
 | 
PTE_W
,

961 0x39f000 | 
PTE_P
 | 
PTE_W
,

962 0x3a0000 | 
PTE_P
 | 
PTE_W
,

963 0x3a1000 | 
PTE_P
 | 
PTE_W
,

964 0x3a2000 | 
PTE_P
 | 
PTE_W
,

965 0x3a3000 | 
PTE_P
 | 
PTE_W
,

966 0x3a4000 | 
PTE_P
 | 
PTE_W
,

967 0x3a5000 | 
PTE_P
 | 
PTE_W
,

968 0x3a6000 | 
PTE_P
 | 
PTE_W
,

969 0x3a7000 | 
PTE_P
 | 
PTE_W
,

970 0x3a8000 | 
PTE_P
 | 
PTE_W
,

971 0x3a9000 | 
PTE_P
 | 
PTE_W
,

972 0x3Ø000 | 
PTE_P
 | 
PTE_W
,

973 0x3ab000 | 
PTE_P
 | 
PTE_W
,

974 0x3ac000 | 
PTE_P
 | 
PTE_W
,

975 0x3ad000 | 
PTE_P
 | 
PTE_W
,

976 0x3´000 | 
PTE_P
 | 
PTE_W
,

977 0x3af000 | 
PTE_P
 | 
PTE_W
,

978 0x3b0000 | 
PTE_P
 | 
PTE_W
,

979 0x3b1000 | 
PTE_P
 | 
PTE_W
,

980 0x3b2000 | 
PTE_P
 | 
PTE_W
,

981 0x3b3000 | 
PTE_P
 | 
PTE_W
,

982 0x3b4000 | 
PTE_P
 | 
PTE_W
,

983 0x3b5000 | 
PTE_P
 | 
PTE_W
,

984 0x3b6000 | 
PTE_P
 | 
PTE_W
,

985 0x3b7000 | 
PTE_P
 | 
PTE_W
,

986 0x3b8000 | 
PTE_P
 | 
PTE_W
,

987 0x3b9000 | 
PTE_P
 | 
PTE_W
,

988 0x3ba000 | 
PTE_P
 | 
PTE_W
,

989 0x3bb000 | 
PTE_P
 | 
PTE_W
,

990 0x3bc000 | 
PTE_P
 | 
PTE_W
,

991 0x3bd000 | 
PTE_P
 | 
PTE_W
,

992 0x3be000 | 
PTE_P
 | 
PTE_W
,

993 0x3bf000 | 
PTE_P
 | 
PTE_W
,

994 0x3c0000 | 
PTE_P
 | 
PTE_W
,

995 0x3c1000 | 
PTE_P
 | 
PTE_W
,

996 0x3c2000 | 
PTE_P
 | 
PTE_W
,

997 0x3c3000 | 
PTE_P
 | 
PTE_W
,

998 0x3c4000 | 
PTE_P
 | 
PTE_W
,

999 0x3c5000 | 
PTE_P
 | 
PTE_W
,

1000 0x3c6000 | 
PTE_P
 | 
PTE_W
,

1001 0x3c7000 | 
PTE_P
 | 
PTE_W
,

1002 0x3c8000 | 
PTE_P
 | 
PTE_W
,

1003 0x3c9000 | 
PTE_P
 | 
PTE_W
,

1004 0x3ˇ000 | 
PTE_P
 | 
PTE_W
,

1005 0x3cb000 | 
PTE_P
 | 
PTE_W
,

1006 0x3cc000 | 
PTE_P
 | 
PTE_W
,

1007 0x3cd000 | 
PTE_P
 | 
PTE_W
,

1008 0x3˚000 | 
PTE_P
 | 
PTE_W
,

1009 0x3cf000 | 
PTE_P
 | 
PTE_W
,

1010 0x3d0000 | 
PTE_P
 | 
PTE_W
,

1011 0x3d1000 | 
PTE_P
 | 
PTE_W
,

1012 0x3d2000 | 
PTE_P
 | 
PTE_W
,

1013 0x3d3000 | 
PTE_P
 | 
PTE_W
,

1014 0x3d4000 | 
PTE_P
 | 
PTE_W
,

1015 0x3d5000 | 
PTE_P
 | 
PTE_W
,

1016 0x3d6000 | 
PTE_P
 | 
PTE_W
,

1017 0x3d7000 | 
PTE_P
 | 
PTE_W
,

1018 0x3d8000 | 
PTE_P
 | 
PTE_W
,

1019 0x3d9000 | 
PTE_P
 | 
PTE_W
,

1020 0x3da000 | 
PTE_P
 | 
PTE_W
,

1021 0x3db000 | 
PTE_P
 | 
PTE_W
,

1022 0x3dc000 | 
PTE_P
 | 
PTE_W
,

1023 0x3dd000 | 
PTE_P
 | 
PTE_W
,

1024 0x3de000 | 
PTE_P
 | 
PTE_W
,

1025 0x3df000 | 
PTE_P
 | 
PTE_W
,

1026 0x3e0000 | 
PTE_P
 | 
PTE_W
,

1027 0x3e1000 | 
PTE_P
 | 
PTE_W
,

1028 0x3e2000 | 
PTE_P
 | 
PTE_W
,

1029 0x3e3000 | 
PTE_P
 | 
PTE_W
,

1030 0x3e4000 | 
PTE_P
 | 
PTE_W
,

1031 0x3e5000 | 
PTE_P
 | 
PTE_W
,

1032 0x3e6000 | 
PTE_P
 | 
PTE_W
,

1033 0x3e7000 | 
PTE_P
 | 
PTE_W
,

1034 0x3e8000 | 
PTE_P
 | 
PTE_W
,

1035 0x3e9000 | 
PTE_P
 | 
PTE_W
,

1036 0x3ó000 | 
PTE_P
 | 
PTE_W
,

1037 0x3eb000 | 
PTE_P
 | 
PTE_W
,

1038 0x3ec000 | 
PTE_P
 | 
PTE_W
,

1039 0x3ed000 | 
PTE_P
 | 
PTE_W
,

1040 0x3ì000 | 
PTE_P
 | 
PTE_W
,

1041 0x3ef000 | 
PTE_P
 | 
PTE_W
,

1042 0x3f0000 | 
PTE_P
 | 
PTE_W
,

1043 0x3f1000 | 
PTE_P
 | 
PTE_W
,

1044 0x3f2000 | 
PTE_P
 | 
PTE_W
,

1045 0x3f3000 | 
PTE_P
 | 
PTE_W
,

1046 0x3f4000 | 
PTE_P
 | 
PTE_W
,

1047 0x3f5000 | 
PTE_P
 | 
PTE_W
,

1048 0x3f6000 | 
PTE_P
 | 
PTE_W
,

1049 0x3f7000 | 
PTE_P
 | 
PTE_W
,

1050 0x3f8000 | 
PTE_P
 | 
PTE_W
,

1051 0x3f9000 | 
PTE_P
 | 
PTE_W
,

1052 0x3Á000 | 
PTE_P
 | 
PTE_W
,

1053 0x3fb000 | 
PTE_P
 | 
PTE_W
,

1054 0x3fc000 | 
PTE_P
 | 
PTE_W
,

1055 0x3fd000 | 
PTE_P
 | 
PTE_W
,

1056 0x3„000 | 
PTE_P
 | 
PTE_W
,

1057 0x3ff000 | 
PTE_P
 | 
PTE_W
,

1058 
	}
};

	@kernel/kbd.c

5 
	~<öc/kbd.h
>

6 
	~<kî√l/å≠.h
>

7 
	~<kî√l/picúq.h
>

8 
	~<öc/°dio.h
>

12 
	#NO
 0

	)

14 
	#SHIFT
 (1<<0)

	)

15 
	#CTL
 (1<<1)

	)

16 
	#ALT
 (1<<2)

	)

18 
	#CAPSLOCK
 (1<<3)

	)

19 
	#NUMLOCK
 (1<<4)

	)

20 
	#SCROLLLOCK
 (1<<5)

	)

22 
uöt8_t
 
	gshi·code
[256] =

24 [0x1D] = 
CTL
,

25 [0x2A] = 
SHIFT
,

26 [0x36] = 
SHIFT
,

27 [0x38] = 
ALT
,

28 [0x9D] = 
CTL
,

29 [0xB8] = 
ALT


32 
uöt8_t
 
	gtoggÀcode
[256] =

34 [0x3A] = 
CAPSLOCK
,

35 [0x45] = 
NUMLOCK
,

36 [0x46] = 
SCROLLLOCK


39 
uöt8_t
 
	gn‹mÆm≠
[256] =

41 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

44 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

46 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

47 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

48 
NO
, ' ', NO, NO, NO, NO, NO, NO,

49 
NO
, NO, NO, NO, NO, NO, NO, '7',

51 '2', '3', '0', '.', 
NO
, NO, NO, NO,

52 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

53 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

54 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

55 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

56 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

57 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


60 
uöt8_t
 
	gshi·m≠
[256] =

62 
NO
, 033, '!', '@', '#', '$', '%', '^',

65 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

67 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

68 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

69 
NO
, ' ', NO, NO, NO, NO, NO, NO,

70 
NO
, NO, NO, NO, NO, NO, NO, '7',

72 '2', '3', '0', '.', 
NO
, NO, NO, NO,

73 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

74 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

75 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

76 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

77 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

78 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


81 
	#C
(
x
Ë(x - '@')

	)

83 
uöt8_t
 
	g˘lm≠
[256] =

85 
NO
, NO, NO, NO, NO, NO, NO, NO,

86 
NO
, NO, NO, NO, NO, NO, NO, NO,

87 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

88 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

89 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

90 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

91 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

92 [0x97] = 
KEY_HOME
,

93 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

94 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

95 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

96 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

97 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


100 
uöt8_t
 *
	gch¨code
[4] = {

101 
n‹mÆm≠
,

102 
shi·m≠
,

103 
˘lm≠
,

104 
˘lm≠


112 
	$kbd_¥oc_d©a
()

114 
c
;

115 
uöt8_t
 
d©a
;

116 
uöt32_t
 
shi·
;

118 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

121 
d©a
 = 
	`öb
(
KBDATAP
);

123 i‡(
d©a
 == 0xE0) {

124 
d©a
 = 
	`öb
(
KBDATAP
);

125 i‡(
d©a
 & 0x80)

128 
d©a
 |= 0x80;

129 } i‡(
d©a
 & 0x80) {

131 
d©a
 &= 0x7F;

132 
shi·
 &~(
shi·code
[
d©a
]);

136 
shi·
 |
shi·code
[
d©a
];

137 
shi·
 ^
toggÀcode
[
d©a
];

139 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

140 i‡(
shi·
 & 
CAPSLOCK
) {

141 i‡('a' <
c
 && c <= 'z')

142 
c
 += 'A' - 'a';

143 i‡('A' <
c
 && c <= 'Z')

144 
c
 += 'a' - 'A';

149 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

150 
	`¥ötk
("Rebooting!\n");

151 
	`outb
(0x92, 0x3);

154  
c
;

155 
	}
}

162 
	#CONSBUFSIZE
 512

	)

165 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

166 
uöt32_t
 
	mΩos
;

167 
uöt32_t
 
	mwpos
;

168 } 
	gc⁄s
;

173 
c⁄s_öå
((*
¥oc
)())

175 
c
;

177 (
c
 = (*
¥oc
)()) != -1) {

178 i‡(
c
 == 0)

181 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

182 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

183 
c⁄s
.
wpos
 = 0;

186 
	}
}

190 
	$c⁄s_gëc
()

192 
c
;

200 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

201 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

202 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

203 
c⁄s
.
Ωos
 = 0;

204  
c
;

207 
	}
}

213 
	$kbd_öå
(
Tøp‰ame
 *
tf
)

215 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

216 
	}
}

218 
	$kbd_öô
()

221 
	`kbd_öå
(
NULL
);

222 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<
IRQ_KBD
));

224 
	`KBD_I≈ut
();

225 
	`ªgi°î_h™dÀr
–
IRQ_OFFSET
 + 
IRQ_KBD
, &
kbd_öå
, &
KBD_I≈ut
, 0, 0);

226 
	}
}

229 
	$k_gëc
()

234  
	`c⁄s_gëc
();

235 
	}
}

	@kernel/kclock.c

7 
	~<öc/x86.h
>

9 
	~<kî√l/k˛ock.h
>

13 
	$mc146818_ªad
(
ªg
)

15 
	`outb
(
IO_RTC
, 
ªg
);

16  
	`öb
(
IO_RTC
+1);

17 
	}
}

20 
	$mc146818_wrôe
(
ªg
, 
d©um
)

22 
	`outb
(
IO_RTC
, 
ªg
);

23 
	`outb
(
IO_RTC
+1, 
d©um
);

24 
	}
}

	@kernel/kclock.h

5 #i‚de‡
JOS_KERN_KCLOCK_H


6 
	#JOS_KERN_KCLOCK_H


	)

8 
	#IO_RTC
 0x070

	)

10 
	#MC_NVRAM_START
 0xê

	)

11 
	#MC_NVRAM_SIZE
 50

	)

14 
	#NVRAM_BASELO
 (
MC_NVRAM_START
 + 7Ë

	)

15 
	#NVRAM_BASEHI
 (
MC_NVRAM_START
 + 8Ë

	)

18 
	#NVRAM_EXTLO
 (
MC_NVRAM_START
 + 9Ë

	)

19 
	#NVRAM_EXTHI
 (
MC_NVRAM_START
 + 10Ë

	)

22 
	#NVRAM_PEXTLO
 (
MC_NVRAM_START
 + 34Ë

	)

23 
	#NVRAM_PEXTHI
 (
MC_NVRAM_START
 + 35Ë

	)

26 
	#NVRAM_CENTURY
 (
MC_NVRAM_START
 + 36Ë

	)

28 
mc146818_ªad
(
ªg
);

29 
mc146818_wrôe
(
ªg
, 
d©um
);

	@kernel/main.c

1 
	~<öc/°dio.h
>

2 
	~<öc/kbd.h
>

3 
	~<öc/shñl.h
>

4 
	~<öc/x86.h
>

5 
	~<kî√l/mem.h
>

6 
	~<kî√l/å≠.h
>

7 
	~<kî√l/picúq.h
>

8 
	~<kî√l/èsk.h
>

9 
	~<kî√l/sysˇŒ.h
>

10 
	~<kî√l/timî.h
>

12 
öô_video
();

13 
Task
 *
cur_èsk
;

15 
	$kî√l_maö
()

17 
°ext
[];

18 
ëext
[], 
íd
[], 
d©a_°¨t
[],
rd©a_íd
[];

19 
	`èsk_job
();

21 
	`öô_video
();

23 
	`å≠_öô
();

24 
	`pic_öô
();

25 
	`kbd_öô
();

26 
	`mem_öô
();

28 
	`¥ötk
("Kî√»codêba£ sèπ=0x%08xÅÿ0x%08x\n", 
°ext
, 
ëext
);

29 
	`¥ötk
("Ród⁄ly d©®°¨t=0x%08xÅÿ0x%08x\n", 
ëext
, 
rd©a_íd
);

30 
	`¥ötk
("Kî√»d©®ba£ sèπ=0x%08xÅÿ0x%08x\n", 
d©a_°¨t
, 
íd
);

31 
	`timî_öô
();

32 
	`sysˇŒ_öô
();

34 
	`èsk_öô
();

37 
__asm
 
	`__vﬁ©ûe
("sti");

39 
	`l¸3
(
	`PADDR
(
cur_èsk
->
pgdú
));

42 
asm
 volatile("movl %0,%%eax\n\t" \

49 :: "m" (
cur_èsk
->
tf
.
tf_e•
), "i" (
GD_UD
 | 0x03), "i" (
GD_UT
 | 0x03), "m" (cur_èsk->tf.
tf_eù
)

51 
	}
}

	@kernel/mem.c

3 
	~<öc/x86.h
>

4 
	~<öc/mmu.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kî√l/mem.h
>

10 
	~<kî√l/k˛ock.h
>

13 
size_t
 
	g≈ages
;

14 
size_t
 
	g≈ages_ba£mem
;

15 *
	g√xt‰ì
;

18 
pde_t
 *
	gkîn_pgdú
;

19 
PageInfo
 *
	g∑ges
;

20 
PageInfo
 *
	g∑ge_‰ì_li°
;

21 
size_t
 
	gnum_‰ì_∑ges
;

28 
	$nvøm_ªad
(
r
)

30  
	`mc146818_ªad
(
r
) | (mc146818_read(r + 1) << 8);

31 
	}
}

34 
	$i386_dëe˘_mem‹y
()

36 
size_t
 
≈ages_extmem
;

40 
≈ages_ba£mem
 = (
	`nvøm_ªad
(
NVRAM_BASELO
Ë* 1024Ë/ 
PGSIZE
;

41 
≈ages_extmem
 = (
	`nvøm_ªad
(
NVRAM_EXTLO
Ë* 1024Ë/ 
PGSIZE
;

45 i‡(
≈ages_extmem
)

46 
≈ages
 = (
EXTPHYSMEM
 / 
PGSIZE
Ë+ 
≈ages_extmem
;

48 
≈ages
 = 
≈ages_ba£mem
;

50 
	`¥ötk
("Physical memory: %uKávailable, base = %uK,Éxtended = %uK\n",

51 
≈ages
 * 
PGSIZE
 / 1024,

52 
≈ages_ba£mem
 * 
PGSIZE
 / 1024,

53 
≈ages_extmem
 * 
PGSIZE
 / 1024);

54 
	}
}

61 
boŸ_m≠_ªgi⁄
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
);

62 
check_∑ge_‰ì_li°
(
boﬁ
 
⁄ly_low_mem‹y
);

63 
check_∑ge_Æloc
();

64 
check_kîn_pgdú
();

65 
phyßddr_t
 
check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
);

66 
check_∑ge
();

67 
check_∑ge_ö°ÆÀd_pgdú
();

82 
	$boŸ_Æloc
(
uöt32_t
 
n
)

84 *
ªsu…
;

91 i‡(!
√xt‰ì
) {

92 
íd
[];

93 
√xt‰ì
 = 
	`ROUNDUP
((*Ë
íd
, 
PGSIZE
);

99 i‡(
n
 == 0)

100  
√xt‰ì
;

101 i‡(
n
 > 0)

103 
ªsu…
 = 
√xt‰ì
;

104 
√xt‰ì
 +
	`ROUNDUP
(
n
, 
PGSIZE
);

107  
ªsu…
;

108 
	}
}

120 
	$mem_öô
()

122 
uöt32_t
 
¸0
;

123 
√xt‰ì
 = 0;

124 
∑ge_‰ì_li°
 = 0;

127 
	`i386_dëe˘_mem‹y
();

131 
kîn_pgdú
 = (
pde_t
 *Ë
	`boŸ_Æloc
(
PGSIZE
);

132 
	`mem£t
(
kîn_pgdú
, 0, 
PGSIZE
);

141 
kîn_pgdú
[
	`PDX
(
UVPT
)] = 
	`PADDR
(kîn_pgdúË| 
PTE_U
 | 
PTE_P
;

158 
	`∑ge_öô
();

160 
	`check_∑ge_‰ì_li°
(1);

161 
	`check_∑ge_Æloc
();

162 
	`check_∑ge
();

174 
	`boŸ_m≠_ªgi⁄
(
kîn_pgdú
, 
UPAGES
, 
	`ROUNDUP
(((
PageInfo
Ë* 
≈ages
), 
PGSIZE
), 
	`PADDR
(
∑ges
), (
PTE_U
 | 
PTE_P
));

201 
	`boŸ_m≠_ªgi⁄
(
kîn_pgdú
, 
IOPHYSMEM
, 
	`ROUNDUP
((
EXTPHYSMEM
 - IOPHYSMEM), 
PGSIZE
), IOPHYSMEM, (
PTE_W
Ë| (
PTE_P
));

204 
	`check_kîn_pgdú
();

213 
	`l¸3
(
	`PADDR
(
kîn_pgdú
));

215 
	`check_∑ge_‰ì_li°
(0);

219 
¸0
 = 
	`r¸0
();

220 
¸0
 |
CR0_PE
|
CR0_PG
|
CR0_AM
|
CR0_WP
|
CR0_NE
|
CR0_MP
;

221 
¸0
 &~(
CR0_TS
|
CR0_EM
);

222 
	`l¸0
(
¸0
);

225 
	`check_∑ge_ö°ÆÀd_pgdú
();

226 
	}
}

241 
	$∑ge_öô
()

262 
size_t
 
i
;

263 
i
 = 0; i < 
≈ages
; i++) {

265 
∑ges
[
i
].
µ_ªf
 = 0;

266 
∑ges
[
i
].
µ_lök
 = 
∑ge_‰ì_li°
;

267 
∑ge_‰ì_li°
 = &
∑ges
[
i
];

269 
	}
}

283 
PageInfo
 *

284 
	$∑ge_Æloc
(
Æloc_Êags
)

287 
	}
}

294 
	$∑ge_‰ì
(
PageInfo
 *
µ
)

300 
	}
}

307 
	$∑ge_de¸ef
(
PageInfo
* 
µ
)

309 i‡(--
µ
->
µ_ªf
 == 0)

310 
	`∑ge_‰ì
(
µ
);

311 
	}
}

335 
±e_t
 *

336 
	$pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
)

340 
	}
}

354 
	$boŸ_m≠_ªgi⁄
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
)

357 
	}
}

385 
	$∑ge_ö£π
(
pde_t
 *
pgdú
, 
PageInfo
 *
µ
, *
va
, 
≥rm
)

388 
	}
}

401 
PageInfo
 *

402 
	$∑ge_lookup
(
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
)

405 
	}
}

423 
	$∑ge_ªmove
(
pde_t
 *
pgdú
, *
va
)

426 
	}
}

429 
	$±abÀ_ªmove
(
pde_t
 *
pgdú
)

431 
i
;

433 
i
 = 0; i < 1024; i++)

435 i‡(
pgdú
[
i
] & 
PTE_P
)

436 
	`∑ge_de¸ef
(
	`∑2∑ge
(
	`PTE_ADDR
(
pgdú
[
i
])));

438 
	}
}

442 
	$pgdú_ªmove
(
pde_t
 *
pgdú
)

444 
	`∑ge_‰ì
(
	`∑2∑ge
(
	`PADDR
(
pgdú
)));

445 
	}
}

452 
	$éb_övÆid©e
(
pde_t
 *
pgdú
, *
va
)

456 
	`övÕg
(
va
);

457 
	}
}

462 
	$£tupvm
(
pde_t
 *
pgdú
, 
uöt32_t
 
°¨t
, uöt32_à
size
)

464 
	`boŸ_m≠_ªgi⁄
(
pgdú
, 
°¨t
, 
	`ROUNDUP
(
size
, 
PGSIZE
), 
	`PADDR
((*)°¨t), 
PTE_W
 | 
PTE_U
);

465 
	`as£π
(
	`check_va2∑
(
pgdú
, 
°¨t
Ë=
	`PADDR
((*)start));

466 
	}
}

474 
pde_t
 *

475 
	$£tupkvm
()

477 
	}
}

481 
öt32_t


482 
	$sys_gë_num_‰ì_∑ge
()

484  
num_‰ì_∑ges
;

485 
	}
}

488 
öt32_t


489 
	$sys_gë_num_u£d_∑ge
()

491  
≈ages
 - 
num_‰ì_∑ges
;

492 
	}
}

502 
	$check_∑ge_‰ì_li°
(
boﬁ
 
⁄ly_low_mem‹y
)

504 
PageInfo
 *
µ
;

505 
pdx_limô
 = 
⁄ly_low_mem‹y
 ? 1 : 
NPDENTRIES
;

506 
n‰ì_ba£mem
 = 0, 
n‰ì_extmem
 = 0;

507 *
fú°_‰ì_∑ge
;

509 i‡(!
∑ge_‰ì_li°
)

510 
	`∑nic
("'page_free_list' isáÇullÖointer!");

512 i‡(
⁄ly_low_mem‹y
) {

515 
PageInfo
 *
µ1
, *
µ2
;

516 
PageInfo
 **
ç
[2] = { &
µ1
, &
µ2
 };

517 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
) {

518 
∑gëy≥
 = 
	`PDX
(
	`∑ge2∑
(
µ
)Ë>
pdx_limô
;

519 *
ç
[
∑gëy≥
] = 
µ
;

520 
ç
[
∑gëy≥
] = &
µ
->
µ_lök
;

522 *
ç
[1] = 0;

523 *
ç
[0] = 
µ2
;

524 
∑ge_‰ì_li°
 = 
µ1
;

529 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
)

530 i‡(
	`PDX
(
	`∑ge2∑
(
µ
)Ë< 
pdx_limô
)

531 
	`mem£t
(
	`∑ge2kva
(
µ
), 0x97, 128);

533 
fú°_‰ì_∑ge
 = (*Ë
	`boŸ_Æloc
(0);

534 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
) {

536 
	`as£π
(
µ
 >
∑ges
);

537 
	`as£π
(
µ
 < 
∑ges
 + 
≈ages
);

538 
	`as£π
(((*Ë
µ
 - (*Ë
∑ges
) % (*pp) == 0);

541 
	`as£π
(
	`∑ge2∑
(
µ
) != 0);

542 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
IOPHYSMEM
);

543 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
EXTPHYSMEM
 - 
PGSIZE
);

544 
	`as£π
(
	`∑ge2∑
(
µ
Ë!
EXTPHYSMEM
);

545 
	`as£π
(
	`∑ge2∑
(
µ
Ë< 
EXTPHYSMEM
 || (*Ë
	`∑ge2kva
’pË>
fú°_‰ì_∑ge
);

547 i‡(
	`∑ge2∑
(
µ
Ë< 
EXTPHYSMEM
)

548 ++
n‰ì_ba£mem
;

550 ++
n‰ì_extmem
;

553 
	`as£π
(
n‰ì_ba£mem
 > 0);

554 
	`as£π
(
n‰ì_extmem
 > 0);

555 
	`¥ötk
("check_page_free_list() succeeded!\n");

556 
	}
}

563 
	$check_∑ge_Æloc
()

565 
PageInfo
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

566 
n‰ì
;

567 
PageInfo
 *
Ê
;

568 *
c
;

569 
i
;

571 i‡(!
∑ges
)

572 
	`∑nic
("'pages' isáÇullÖointer!");

575 
µ
 = 
∑ge_‰ì_li°
, 
n‰ì
 = 0;Öp;Ö∞µ->
µ_lök
)

576 ++
n‰ì
;

579 
µ0
 = 
µ1
 = 
µ2
 = 0;

580 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

581 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

582 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

584 
	`as£π
(
µ0
);

585 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

586 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

587 
	`as£π
(
	`∑ge2∑
(
µ0
Ë< 
≈ages
*
PGSIZE
);

588 
	`as£π
(
	`∑ge2∑
(
µ1
Ë< 
≈ages
*
PGSIZE
);

589 
	`as£π
(
	`∑ge2∑
(
µ2
Ë< 
≈ages
*
PGSIZE
);

592 
Ê
 = 
∑ge_‰ì_li°
;

593 
∑ge_‰ì_li°
 = 0;

596 
	`as£π
(!
	`∑ge_Æloc
(0));

599 
	`∑ge_‰ì
(
µ0
);

600 
	`∑ge_‰ì
(
µ1
);

601 
	`∑ge_‰ì
(
µ2
);

602 
µ0
 = 
µ1
 = 
µ2
 = 0;

603 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

604 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

605 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

606 
	`as£π
(
µ0
);

607 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

608 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

609 
	`as£π
(!
	`∑ge_Æloc
(0));

612 
	`mem£t
(
	`∑ge2kva
(
µ0
), 1, 
PGSIZE
);

613 
	`∑ge_‰ì
(
µ0
);

614 
	`as£π
((
µ
 = 
	`∑ge_Æloc
(
ALLOC_ZERO
)));

615 
	`as£π
(
µ
 && 
µ0
 ==Öp);

616 
c
 = 
	`∑ge2kva
(
µ
);

617 
i
 = 0; i < 
PGSIZE
; i++)

618 
	`as£π
(
c
[
i
] == 0);

621 
∑ge_‰ì_li°
 = 
Ê
;

624 
	`∑ge_‰ì
(
µ0
);

625 
	`∑ge_‰ì
(
µ1
);

626 
	`∑ge_‰ì
(
µ2
);

629 
µ
 = 
∑ge_‰ì_li°
;Öp;Ö∞µ->
µ_lök
)

630 --
n‰ì
;

631 
	`as£π
(
n‰ì
 == 0);

633 
	`¥ötk
("check_page_alloc() succeeded!\n");

634 
	}
}

645 
	$check_kîn_pgdú
()

647 
uöt32_t
 
i
, 
n
;

648 
pde_t
 *
pgdú
;

650 
pgdú
 = 
kîn_pgdú
;

653 
i
 = 
IOPHYSMEM
; i < 
	`ROUNDUP
(
EXTPHYSMEM
, 
PGSIZE
); i += PGSIZE)

654 
	`as£π
(
	`check_va2∑
(
pgdú
, 
i
) == i);

657 
n
 = 
	`ROUNDUP
(
≈ages
*(
PageInfo
), 
PGSIZE
);

658 
i
 = 0; i < 
n
; i +
PGSIZE
)

659 
	`as£π
(
	`check_va2∑
(
pgdú
, 
UPAGES
 + 
i
Ë=
	`PADDR
(
∑ges
) + i);

662 
i
 = 0; i < 
≈ages
 * 
PGSIZE
; i += PGSIZE)

663 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KERNBASE
 + 
i
) == i);

666 
i
 = 0; i < 
KSTKSIZE
; i +
PGSIZE
)

667 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
KSTKSIZE
 + 
i
Ë=
	`PADDR
(
boŸ°ack
) + i);

668 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
PTSIZE
) == ~0);

671 
i
 = 0; i < 
NPDENTRIES
; i++) {

672 
i
) {

673 
	`PDX
(
IOPHYSMEM
):

674 
	`PDX
(
UVPT
):

675 
	`PDX
(
KSTACKTOP
-1):

676 
	`PDX
(
UPAGES
):

677 
	`as£π
(
pgdú
[
i
] & 
PTE_P
);

680 i‡(
i
 >
	`PDX
(
KERNBASE
)) {

681 
	`as£π
(
pgdú
[
i
] & 
PTE_P
);

682 
	`as£π
(
pgdú
[
i
] & 
PTE_W
);

684 
	`as£π
(
pgdú
[
i
] == 0);

688 
	`¥ötk
("check_kern_pgdir() succeeded!\n");

689 
	}
}

696 
phyßddr_t


697 
	$check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
)

699 
±e_t
 *
p
;

701 
pgdú
 = &pgdú[
	`PDX
(
va
)];

702 i‡(!(*
pgdú
 & 
PTE_P
))

704 
p
 = (
±e_t
*Ë
	`KADDR
(
	`PTE_ADDR
(*
pgdú
));

705 i‡(!(
p
[
	`PTX
(
va
)] & 
PTE_P
))

707  
	`PTE_ADDR
(
p
[
	`PTX
(
va
)]);

708 
	}
}

713 
	$check_∑ge
()

715 
PageInfo
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

716 
PageInfo
 *
Ê
;

717 
±e_t
 *
±ï
, *
±ï1
;

718 *
va
;

719 
i
;

722 
µ0
 = 
µ1
 = 
µ2
 = 0;

723 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

724 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

725 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

727 
	`as£π
(
µ0
);

728 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

729 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

732 
Ê
 = 
∑ge_‰ì_li°
;

733 
∑ge_‰ì_li°
 = 0;

736 
	`as£π
(!
	`∑ge_Æloc
(0));

739 
	`as£π
(
	`∑ge_lookup
(
kîn_pgdú
, (*Ë0x0, &
±ï
Ë=
NULL
);

742 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ1
, 0x0, 
PTE_W
) < 0);

745 
	`∑ge_‰ì
(
µ0
);

746 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ1
, 0x0, 
PTE_W
) == 0);

747 
	`as£π
(
	`PTE_ADDR
(
kîn_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

748 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 0x0Ë=
	`∑ge2∑
(
µ1
));

749 
	`as£π
(
µ1
->
µ_ªf
 == 1);

750 
	`as£π
(
µ0
->
µ_ªf
 == 1);

753 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_W
) == 0);

754 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

755 
	`as£π
(
µ2
->
µ_ªf
 == 1);

758 
	`as£π
(!
	`∑ge_Æloc
(0));

761 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_W
) == 0);

762 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

763 
	`as£π
(
µ2
->
µ_ªf
 == 1);

767 
	`as£π
(!
	`∑ge_Æloc
(0));

770 
±ï
 = (
±e_t
 *Ë
	`KADDR
(
	`PTE_ADDR
(
kîn_pgdú
[
	`PDX
(
PGSIZE
)]));

771 
	`as£π
(
	`pgdú_wÆk
(
kîn_pgdú
, (*)
PGSIZE
, 0Ë=
±ï
+
	`PTX
(PGSIZE));

774 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_W
|
PTE_U
) == 0);

775 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

776 
	`as£π
(
µ2
->
µ_ªf
 == 1);

777 
	`as£π
(*
	`pgdú_wÆk
(
kîn_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
);

778 
	`as£π
(
kîn_pgdú
[0] & 
PTE_U
);

781 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_W
) == 0);

782 
	`as£π
(*
	`pgdú_wÆk
(
kîn_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_W
);

783 
	`as£π
(!(*
	`pgdú_wÆk
(
kîn_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
));

786 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ0
, (*Ë
PTSIZE
, 
PTE_W
) < 0);

789 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ1
, (*Ë
PGSIZE
, 
PTE_W
) == 0);

790 
	`as£π
(!(*
	`pgdú_wÆk
(
kîn_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
));

793 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 0Ë=
	`∑ge2∑
(
µ1
));

794 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

796 
	`as£π
(
µ1
->
µ_ªf
 == 2);

797 
	`as£π
(
µ2
->
µ_ªf
 == 0);

800 
	`as£π
((
µ
 = 
	`∑ge_Æloc
(0)Ë&&Ö∞=
µ2
);

803 
	`∑ge_ªmove
(
kîn_pgdú
, 0x0);

804 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 0x0) == ~0);

805 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

806 
	`as£π
(
µ1
->
µ_ªf
 == 1);

807 
	`as£π
(
µ2
->
µ_ªf
 == 0);

810 
	`as£π
(
	`∑ge_ö£π
(
kîn_pgdú
, 
µ1
, (*Ë
PGSIZE
, 0) == 0);

811 
	`as£π
(
µ1
->
µ_ªf
);

812 
	`as£π
(
µ1
->
µ_lök
 =
NULL
);

815 
	`∑ge_ªmove
(
kîn_pgdú
, (*Ë
PGSIZE
);

816 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 0x0) == ~0);

817 
	`as£π
(
	`check_va2∑
(
kîn_pgdú
, 
PGSIZE
) == ~0);

818 
	`as£π
(
µ1
->
µ_ªf
 == 0);

819 
	`as£π
(
µ2
->
µ_ªf
 == 0);

822 
	`as£π
((
µ
 = 
	`∑ge_Æloc
(0)Ë&&Ö∞=
µ1
);

825 
	`as£π
(!
	`∑ge_Æloc
(0));

828 
	`as£π
(
	`PTE_ADDR
(
kîn_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

829 
kîn_pgdú
[0] = 0;

830 
	`as£π
(
µ0
->
µ_ªf
 == 1);

831 
µ0
->
µ_ªf
 = 0;

834 
	`∑ge_‰ì
(
µ0
);

835 
va
 = (*)(
PGSIZE
 * 
NPDENTRIES
 + PGSIZE);

836 
±ï
 = 
	`pgdú_wÆk
(
kîn_pgdú
, 
va
, 1);

837 
±ï1
 = (
±e_t
 *Ë
	`KADDR
(
	`PTE_ADDR
(
kîn_pgdú
[
	`PDX
(
va
)]));

838 
	`as£π
(
±ï
 =
±ï1
 + 
	`PTX
(
va
));

839 
kîn_pgdú
[
	`PDX
(
va
)] = 0;

840 
µ0
->
µ_ªf
 = 0;

843 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0xFF, 
PGSIZE
);

844 
	`∑ge_‰ì
(
µ0
);

845 
	`pgdú_wÆk
(
kîn_pgdú
, 0x0, 1);

846 
±ï
 = (
±e_t
 *Ë
	`∑ge2kva
(
µ0
);

847 
i
=0; i<
NPTENTRIES
; i++)

848 
	`as£π
((
±ï
[
i
] & 
PTE_P
) == 0);

849 
kîn_pgdú
[0] = 0;

850 
µ0
->
µ_ªf
 = 0;

853 
∑ge_‰ì_li°
 = 
Ê
;

856 
	`∑ge_‰ì
(
µ0
);

857 
	`∑ge_‰ì
(
µ1
);

858 
	`∑ge_‰ì
(
µ2
);

860 
	`¥ötk
("check_page() succeeded!\n");

861 
	}
}

865 
	$check_∑ge_ö°ÆÀd_pgdú
()

867 
PageInfo
 *
µ0
, *
µ1
, *
µ2
;

870 
µ1
 = 
µ2
 = 0;

871 
	`as£π
((
µ0
 = 
	`∑ge_Æloc
(0)));

872 
	`as£π
((
µ1
 = 
	`∑ge_Æloc
(0)));

873 
	`as£π
((
µ2
 = 
	`∑ge_Æloc
(0)));

874 
	`∑ge_‰ì
(
µ0
);

875 
	`mem£t
(
	`∑ge2kva
(
µ1
), 1, 
PGSIZE
);

876 
	`mem£t
(
	`∑ge2kva
(
µ2
), 2, 
PGSIZE
);

877 
	`∑ge_ö£π
(
kîn_pgdú
, 
µ1
, (*Ë
EXTPHYSMEM
, 
PTE_W
);

878 
	`as£π
(
µ1
->
µ_ªf
 == 1);

879 
	`as£π
(*(
uöt32_t
 *)
EXTPHYSMEM
 == 0x01010101U);

880 
	`∑ge_ö£π
(
kîn_pgdú
, 
µ2
, (*Ë
EXTPHYSMEM
, 
PTE_W
);

881 
	`as£π
(*(
uöt32_t
 *)
EXTPHYSMEM
 == 0x02020202U);

882 
	`as£π
(
µ2
->
µ_ªf
 == 1);

883 
	`as£π
(
µ1
->
µ_ªf
 == 0);

884 *(
uöt32_t
 *)
EXTPHYSMEM
 = 0x03030303U;

885 
	`as£π
(*(
uöt32_t
 *)
	`∑ge2kva
(
µ2
) == 0x03030303U);

886 
	`∑ge_ªmove
(
kîn_pgdú
, (*Ë
EXTPHYSMEM
);

887 
	`as£π
(
µ2
->
µ_ªf
 == 0);

889 
	`¥ötk
("check_page_installed_pgdir() succeeded!\n");

890 
	}
}

	@kernel/mem.h

1 #i‚de‡
MEM_H


2 
	#MEM_H


	)

4 
	~<öc/memœyout.h
>

5 
	~<öc/as£π.h
>

7 
boŸ°ackt›
[], 
boŸ°ack
[];

8 
PageInfo
 *
∑ges
;

9 
size_t
 
≈ages
;

10 
pde_t
 *
kîn_pgdú
;

17 
	#PADDR
(
kva
Ë
	`_∑ddr
(
__FILE__
, 
__LINE__
, kva)

	)

21 
	#KADDR
(
∑
Ë
	`_kaddr
(
__FILE__
, 
__LINE__
,Öa)

	)

25 
	mALLOC_ZERO
 = 1<<0,

30 
mem_öô
 ();

31 
∑ge_öô
 ();

32 
∑ge_‰ì
 (
PageInfo
 *
µ
);

33 
∑ge_ö£π
 (
pde_t
 *
pgdú
, 
PageInfo
 *
µ
, *
va
, 
≥rm
);

34 
∑ge_ªmove
 (
pde_t
 *
pgdú
, *
va
);

35 
±abÀ_ªmove
 (
pde_t
 *
pgdú
);

36 
pgdú_ªmove
 (
pde_t
 *
pgdú
);

37 
∑ge_de¸ef
 (
PageInfo
 *
µ
);

38 
PageInfo
 *
∑ge_Æloc
 (
Æloc_Êags
);

39 
PageInfo
 *
∑ge_lookup
 (
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
);

40 
pde_t
 *
£tupkvm
 ();

41 
£tupvm
 (
pde_t
 *
pgdú
, 
uöt32_t
 
°¨t
, uöt32_à
size
);

42 
±e_t
 *
pgdú_wÆk
 (
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
);

43 
éb_övÆid©e
 (
pde_t
 *
pgdú
, *
va
);

44 
mem_öô
 ();

46 
öt32_t
 
sys_gë_num_‰ì_∑ge
 ();

47 
öt32_t
 
sys_gë_num_u£d_∑ge
 ();

52 
ölöe
 
phyßddr_t


53 
	$_∑ddr
(c⁄° *
fûe
, 
löe
, *
kva
)

55 i‡((
uöt32_t
)
kva
 < 
KERNBASE
)

56 
	`_∑nic
(
fûe
, 
löe
, "PADDR cÆÀd wôh invÆid kv®%08lx", 
kva
);

57  (
phyßddr_t
)
kva
 - 
KERNBASE
;

58 
	}
}

60 
ölöe
 *

61 
	$_kaddr
(c⁄° *
fûe
, 
löe
, 
phyßddr_t
 
∑
)

63 i‡(
	`PGNUM
(
∑
Ë>
≈ages
)

64 
	`_∑nic
(
fûe
, 
löe
, "KADDR cÆÀd wôh invÆidÖ®%08lx", 
∑
);

65  (*)(
∑
 + 
KERNBASE
);

66 
	}
}

68 
ölöe
 
phyßddr_t


69 
	$∑ge2∑
(
PageInfo
 *
µ
)

71  (
µ
 - 
∑ges
Ë<< 
PGSHIFT
;

72 
	}
}

74 
ölöe
 
PageInfo
*

75 
	$∑2∑ge
(
phyßddr_t
 
∑
)

77 i‡(
	`PGNUM
(
∑
Ë>
≈ages
)

78 
	`∑nic
("pa2page called with invalidÖa");

79  &
∑ges
[
	`PGNUM
(
∑
)];

80 
	}
}

82 
ölöe
 *

83 
	$∑ge2kva
(
PageInfo
 *
µ
)

85  
	`KADDR
(
	`∑ge2∑
(
µ
));

86 
	}
}

	@kernel/picirq.c

3 
	~<öc/°dio.h
>

4 
	~<öc/å≠.h
>

6 
	~<kî√l/picúq.h
>

11 
uöt16_t
 
	gúq_mask_8259A
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

12 
boﬁ
 
	gdidöô
;

16 
	$pic_öô
()

18 
didöô
 = 1;

21 
	`outb
(
IO_PIC1
+1, 0xFF);

22 
	`outb
(
IO_PIC2
+1, 0xFF);

30 
	`outb
(
IO_PIC1
, 0x11);

33 
	`outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

37 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

47 
	`outb
(
IO_PIC1
+1, 0x3);

50 
	`outb
(
IO_PIC2
, 0x11);

51 
	`outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

52 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

55 
	`outb
(
IO_PIC2
+1, 0x01);

61 
	`outb
(
IO_PIC1
, 0x68);

62 
	`outb
(
IO_PIC1
, 0x0a);

64 
	`outb
(
IO_PIC2
, 0x68);

65 
	`outb
(
IO_PIC2
, 0x0a);

67 i‡(
úq_mask_8259A
 != 0xFFFF)

68 
	`úq_£tmask_8259A
(
úq_mask_8259A
);

69 
	}
}

72 
	$úq_£tmask_8259A
(
uöt16_t
 
mask
)

74 
úq_mask_8259A
 = 
mask
;

75 i‡(!
didöô
)

77 
	`outb
(
IO_PIC1
+1, ()
mask
);

78 
	`outb
(
IO_PIC2
+1, ()(
mask
 >> 8));

79 
	}
}

	@kernel/picirq.h

3 #i‚de‡
JOS_KERN_PICIRQ_H


4 
	#JOS_KERN_PICIRQ_H


	)

9 
	#MAX_IRQS
 16

10 

	)

12 
	#IO_PIC1
 0x20

13 
	#IO_PIC2
 0xA0

14 

	)

15 
	#IRQ_SLAVE
 2

16 

	)

18 #i‚de‡
__ASSEMBLER__


20 
	~<öc/ty≥s.h
>

21 
	~<öc/x86.h
>

23 
uöt16_t
 
úq_mask_8259A
;

24 
pic_öô
();

25 
úq_£tmask_8259A
(
uöt16_t
 
mask
);

	@kernel/printf.c

3 
	~<öc/ty≥s.h
>

4 
	~<öc/°dio.h
>

7 
	$putch
(
ch
, *
˙t
)

9 
	`k_putch
(
ch
);

10 (*
˙t
)++;

11 
	}
}

14 
	$v¥ötk
(c⁄° *
fmt
, 
va_li°
 
≠
)

16 
˙t
 = 0;

18 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

19  
˙t
;

20 
	}
}

23 
	$¥ötk
(c⁄° *
fmt
, ...)

25 
va_li°
 
≠
;

26 
˙t
;

28 
	`va_°¨t
(
≠
, 
fmt
);

29 
˙t
 = 
	`v¥ötk
(
fmt
, 
≠
);

30 
	`va_íd
(
≠
);

32  
˙t
;

33 
	}
}

	@kernel/sched.c

1 
	~<kî√l/èsk.h
>

2 
	~<öc/x86.h
>

4 
	#˘x_swôch
(
ts
) \

5 dÿ{ 
	`ív_p›_tf
(&((
ts
)->
tf
)); } 0)

	)

22 
	$sched_yõld
()

24 
Task
 
èsks
[];

25 
Task
 *
cur_èsk
;

26 
	}
}

	@kernel/screen.c

2 
	~<öc/x86.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/°dio.h
>

8 *
	gãxtmem±r
;

9 
	g©åib
 = 0x0F;

10 
	gc§_x
 = 0, 
	gc§_y
 = 0;

13 
	$s¸ﬁl
()

15 
bœnk
, 
ãmp
;

19 
bœnk
 = 0x0 | (
©åib
 << 8);

22 if(
c§_y
 >= 25)

26 
ãmp
 = 
c§_y
 - 25 + 1;

27 
	`mem˝y
 (
ãxtmem±r
,Åextmem±∏+ 
ãmp
 * 80, (25 -Åemp) * 80 * 2);

31 
	`mem£t
 (
ãxtmem±r
 + (25 - 
ãmp
Ë* 80, 
bœnk
, 80 * 2);

32 
c§_y
 = 25 - 1;

34 
	}
}

38 
	$move_c§
()

40 
ãmp
;

45 
ãmp
 = 
c§_y
 * 80 + 
c§_x
;

54 
	`outb
(0x3D4, 14);

55 
	`outb
(0x3D5, 
ãmp
 >> 8);

56 
	`outb
(0x3D4, 15);

57 
	`outb
(0x3D5, 
ãmp
);

58 
	}
}

61 
	$sys_˛s
()

63 
bœnk
;

64 
i
;

68 
bœnk
 = 0x0 | (
©åib
 << 8);

72 
i
 = 0; i < 25; i++)

73 
	`mem£t
 (
ãxtmem±r
 + 
i
 * 80, 
bœnk
, 80 * 2);

77 
c§_x
 = 0;

78 
c§_y
 = 0;

79 
	`move_c§
();

80 
	}
}

83 
	$k_putch
(
c
)

85 *
whîe
;

86 
©t
 = 
©åib
 << 8;

89 if(
c
 == 0x08)

91 if(
c§_x
 != 0) {

92 
whîe
 = (
ãxtmem±r
-1Ë+ (
c§_y
 * 80 + 
c§_x
);

93 *
whîe
 = 0x0 | 
©t
;

94 
c§_x
--;

99 if(
c
 == 0x09)

101 
c§_x
 = (csr_x + 8) & ~(8 - 1);

105 if(
c
 == '\r')

107 
c§_x
 = 0;

112 if(
c
 == '\n')

114 
c§_x
 = 0;

115 
c§_y
++;

121 if(
c
 >= ' ')

123 
whîe
 = 
ãxtmem±r
 + (
c§_y
 * 80 + 
c§_x
);

124 *
whîe
 = 
c
 | 
©t
;

125 
c§_x
++;

130 if(
c§_x
 >= 80)

132 
c§_x
 = 0;

133 
c§_y
++;

137 
	`s¸ﬁl
();

138 
	`move_c§
();

139 
	}
}

142 
	$k_puts
(*
ãxt
)

144 
i
;

146 
i
 = 0; i < 
	`°æí
((*)
ãxt
); i++)

148 
	`k_putch
(
ãxt
[
i
]);

150 
	}
}

153 
	$sys_£âextcﬁ‹
(
f‹ecﬁ‹
, 
backcﬁ‹
)

155 
©åib
 = (
backcﬁ‹
 << 4Ë| (
f‹ecﬁ‹
 & 0x0F);

156 
	}
}

159 
	$öô_video
()

161 
ãxtmem±r
 = (*)0xB8000;

162 
	`sys_˛s
();

163 
	}
}

	@kernel/shell.c

1 
	~<öc/°dio.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/shñl.h
>

4 
	~<öc/timî.h
>

6 
	sComm™d
 {

7 c⁄° *
	m«me
;

8 c⁄° *
	mdesc
;

10 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
);

13 
Comm™d
 
	gcomm™ds
[] = {

14 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

15 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

16 { "¥öt_tick", "Di•œy sy°emÅick", 
¥öt_tick
 }

18 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

21 
	$m⁄_hñp
(
¨gc
, **
¨gv
)

23 
i
;

25 
i
 = 0; i < 
NCOMMANDS
; i++)

26 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

28 
	}
}

30 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
)

39 
	}
}

40 
	$¥öt_tick
(
¨gc
, **
¨gv
)

42 
	`˝rötf
("NowÅick = %d\n", 
	`gë_tick
());

43 
	}
}

45 
	#WHITESPACE
 "\t\r\¿"

	)

46 
	#MAXARGS
 16

	)

48 
	$runcmd
(*
buf
)

50 
¨gc
;

51 *
¨gv
[
MAXARGS
];

52 
i
;

55 
¨gc
 = 0;

56 
¨gv
[
¨gc
] = 0;

59 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

60 *
buf
++ = 0;

61 i‡(*
buf
 == 0)

65 i‡(
¨gc
 =
MAXARGS
-1) {

66 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

69 
¨gv
[
¨gc
++] = 
buf
;

70 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

71 
buf
++;

73 
¨gv
[
¨gc
] = 0;

76 i‡(
¨gc
 == 0)

78 
i
 = 0; i < 
NCOMMANDS
; i++) {

79 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

80  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
);

82 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

84 
	}
}

85 
	$shñl
()

87 *
buf
;

88 
	`˝rötf
("WelcomeÅoÅhe OSDI course!\n");

89 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

93 
buf
 = 
	`ªadlöe
("OSDI> ");

94 i‡(
buf
 !
NULL
)

96 i‡(
	`runcmd
(
buf
) < 0)

100 
	}
}

	@kernel/syscall.c

1 
	~<kî√l/èsk.h
>

2 
	~<kî√l/timî.h
>

3 
	~<kî√l/mem.h
>

4 
	~<kî√l/sysˇŒ.h
>

5 
	~<kî√l/å≠.h
>

6 
	~<öc/°dio.h
>

8 
	$do_puts
(*
°r
, 
uöt32_t
 
Àn
)

10 
uöt32_t
 
i
;

11 
i
 = 0; i < 
Àn
; i++)

13 
	`k_putch
(
°r
[
i
]);

15 
	}
}

17 
öt32_t
 
	$do_gëc
()

19  
	`k_gëc
();

20 
	}
}

22 
öt32_t
 
	$do_sysˇŒ
(
uöt32_t
 
sysˇŒno
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

24 
öt32_t
 
ªtVÆ
 = -1;

25 
Task
 *
cur_èsk
;

27 
sysˇŒno
)

29 
SYS_f‹k
:

35 
SYS_gëc
:

36 
ªtVÆ
 = 
	`do_gëc
();

39 
SYS_puts
:

40 
	`do_puts
((*)
a1
, 
a2
);

41 
ªtVÆ
 = 0;

44 
SYS_gëpid
:

50 
SYS_¶ìp
:

57 
SYS_kûl
:

64 
SYS_gë_num_‰ì_∑ge
:

70 
SYS_gë_num_u£d_∑ge
:

76 
SYS_gë_ticks
:

80 
ªtVÆ
 = 
	`sys_gë_ticks
();

83 
SYS_£âextcﬁ‹
:

89 
SYS_˛s
:

96  
ªtVÆ
;

97 
	}
}

99 
	$sysˇŒ_h™dÀr
(
Tøp‰ame
 *
tf
)

107 
	}
}

109 
	$sysˇŒ_öô
()

116 
	}
}

	@kernel/syscall.h

1 #i‚de‡
SYS_CALL_H


2 
	#SYS_CALL_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/sysˇŒ.h
>

6 
öt32_t
 
do_sysˇŒ
(
uöt32_t
 
sysˇŒno
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
);

8 
sysˇŒ_öô
();

	@kernel/task.c

1 
	~<öc/mmu.h
>

2 
	~<öc/ty≥s.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/x86.h
>

5 
	~<öc/memœyout.h
>

6 
	~<kî√l/èsk.h
>

7 
	~<kî√l/mem.h
>

24 
Segdesc
 
	ggdt
[6] =

27 
SEG_NULL
,

30 [
GD_KT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 0),

33 [
GD_KD
 >> 3] = 
SEG
(
STA_W
, 0x0, 0xffffffff, 0),

36 [
GD_UT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 3),

39 [
GD_UD
 >> 3] = 
SEG
(
STA_W
 , 0x0, 0xffffffff, 3),

43 [
GD_TSS0
 >> 3] = 
SEG_NULL


47 
P£udodesc
 
	ggdt_pd
 = {

48 (
gdt
) - 1, () gdt

53 
tss_°ru˘
 
	gtss
;

54 
Task
 
	gèsks
[
NR_TASKS
];

56 
boŸ°ack
[];

58 
UTEXT_°¨t
[], 
UTEXT_íd
[];

59 
UDATA_°¨t
[], 
UDATA_íd
[];

60 
UBSS_°¨t
[], 
UBSS_íd
[];

61 
URODATA_°¨t
[], 
URODATA_íd
[];

63 
uöt32_t
 
	gUTEXT_SZ
;

64 
uöt32_t
 
	gUDATA_SZ
;

65 
uöt32_t
 
	gUBSS_SZ
;

66 
uöt32_t
 
	gURODATA_SZ
;

68 
Task
 *
	gcur_èsk
 = 
NULL
;

70 
sched_yõld
();

98 
	$èsk_¸óã
()

100 
Task
 *
ts
 = 
NULL
;

105 i‡(!(
ts
->
pgdú
 = 
	`£tupkvm
()))

106 
	`∑nic
("NotÉnough memory forÖerÖrocessÖage directory!\n");

111 
	`mem£t
–&(
ts
->
tf
), 0, (ts->tf));

113 
ts
->
tf
.
tf_cs
 = 
GD_UT
 | 0x03;

114 
ts
->
tf
.
tf_ds
 = 
GD_UD
 | 0x03;

115 
ts
->
tf
.
tf_es
 = 
GD_UD
 | 0x03;

116 
ts
->
tf
.
tf_ss
 = 
GD_UD
 | 0x03;

117 
ts
->
tf
.
tf_e•
 = 
USTACKTOP
-
PGSIZE
;

120 
	}
}

140 
	$èsk_‰ì
(
pid
)

142 
	}
}

144 
	$sys_kûl
(
pid
)

146 i‡(
pid
 > 0 &&Öid < 
NR_TASKS
)

154 
	}
}

180 
	$sys_f‹k
()

183 
pid
;

184 i‡((
uöt32_t
)
cur_èsk
)

187 
	`£tupvm
(
èsks
[
pid
].
pgdú
, (
uöt32_t
)
UTEXT_°¨t
, 
UTEXT_SZ
);

188 
	`£tupvm
(
èsks
[
pid
].
pgdú
, (
uöt32_t
)
UDATA_°¨t
, 
UDATA_SZ
);

189 
	`£tupvm
(
èsks
[
pid
].
pgdú
, (
uöt32_t
)
UBSS_°¨t
, 
UBSS_SZ
);

190 
	`£tupvm
(
èsks
[
pid
].
pgdú
, (
uöt32_t
)
URODATA_°¨t
, 
URODATA_SZ
);

193 
	}
}

199 
	$èsk_öô
()

201 
	`u£r_íåy
();

202 
i
;

203 
UTEXT_SZ
 = (
uöt32_t
)(
UTEXT_íd
 - 
UTEXT_°¨t
);

204 
UDATA_SZ
 = (
uöt32_t
)(
UDATA_íd
 - 
UDATA_°¨t
);

205 
UBSS_SZ
 = (
uöt32_t
)(
UBSS_íd
 - 
UBSS_°¨t
);

206 
URODATA_SZ
 = (
uöt32_t
)(
URODATA_íd
 - 
URODATA_°¨t
);

209 
i
 = 0; i < 
NR_TASKS
; i++)

211 
	`mem£t
(&(
èsks
[
i
]), 0, (
Task
));

212 
èsks
[
i
].
°©e
 = 
TASK_FREE
;

217 
	`mem£t
(&(
tss
), 0, (tss));

218 
tss
.
ts_e•0
 = (
uöt32_t
)
boŸ°ack
 + 
KSTKSIZE
;

219 
tss
.
ts_ss0
 = 
GD_KD
;

222 
tss
.
ts_fs
 = 
GD_UD
 | 0x03;

223 
tss
.
ts_gs
 = 
GD_UD
 | 0x03;

226 
gdt
[
GD_TSS0
 >> 3] = 
	`SEG16
(
STS_T32A
, (
uöt32_t
)(&
tss
), (
tss_°ru˘
), 0);

227 
gdt
[
GD_TSS0
 >> 3].
sd_s
 = 0;

230 
i
 = 
	`èsk_¸óã
();

231 
cur_èsk
 = &(
èsks
[
i
]);

234 
	`£tupvm
(
cur_èsk
->
pgdú
, (
uöt32_t
)
UTEXT_°¨t
, 
UTEXT_SZ
);

235 
	`£tupvm
(
cur_èsk
->
pgdú
, (
uöt32_t
)
UDATA_°¨t
, 
UDATA_SZ
);

236 
	`£tupvm
(
cur_èsk
->
pgdú
, (
uöt32_t
)
UBSS_°¨t
, 
UBSS_SZ
);

237 
	`£tupvm
(
cur_èsk
->
pgdú
, (
uöt32_t
)
URODATA_°¨t
, 
URODATA_SZ
);

238 
cur_èsk
->
tf
.
tf_eù
 = (
uöt32_t
)
u£r_íåy
;

241 
	`lgdt
(&
gdt_pd
);

244 
	`Œdt
(0);

247 
	`…r
(
GD_TSS0
);

249 
cur_èsk
->
°©e
 = 
TASK_RUNNING
;

251 
	}
}

	@kernel/task.h

1 #i‚de‡
TASK_H


2 
	#TASK_H


	)

4 
	~<öc/å≠.h
>

5 
	~<kî√l/mem.h
>

6 
	#NR_TASKS
 10

	)

7 
	#TIME_QUANT
 100

	)

11 
	mTASK_FREE
 = 0,

12 
	mTASK_RUNNABLE
,

13 
	mTASK_RUNNING
,

14 
	mTASK_SLEEP
,

15 
	mTASK_STOP
,

16 } 
	tTaskSèã
;

19 
	#USR_STACK_SIZE
 (40960)

	)

23 
	mèsk_id
;

24 
	m∑ª¡_id
;

25 
Tøp‰ame
 
	mtf
;

26 
öt32_t
 
	mªmöd_ticks
;

27 
TaskSèã
 
	m°©e
;

28 
pde_t
 *
	mpgdú
;

30 } 
	tTask
;

32 
èsk_öô
();

33 
ív_p›_tf
(
Tøp‰ame
 *
tf
);

	@kernel/timer.c

2 
	~<kî√l/å≠.h
>

3 
	~<kî√l/picúq.h
>

4 
	~<kî√l/èsk.h
>

5 
	~<öc/mmu.h
>

6 
	~<öc/x86.h
>

8 
	#TIME_HZ
 100

	)

10 
	gjiffõs
 = 0;

12 
	$£t_timî
(
hz
)

14 
divis‹
 = 1193180 / 
hz
;

15 
	`outb
(0x43, 0x36);

16 
	`outb
(0x40, 
divis‹
 & 0xFF);

17 
	`outb
(0x40, 
divis‹
 >> 8);

18 
	}
}

21 
	$timî_h™dÀr
(
Tøp‰ame
 *
tf
)

23 
	`sched_yõld
();

24 
i
;

26 
jiffõs
++;

28 
Task
 
èsks
[];

30 
Task
 *
cur_èsk
;

32 i‡(
cur_èsk
 !
NULL
)

39 
	}
}

41 
	$sys_gë_ticks
()

43  
jiffõs
;

44 
	}
}

45 
	$timî_öô
()

47 
	`£t_timî
(
TIME_HZ
);

50 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<
IRQ_TIMER
));

53 
	`TIM_ISR
();

54 
	`ªgi°î_h™dÀr
–
IRQ_OFFSET
 + 
IRQ_TIMER
, &
timî_h™dÀr
, &
TIM_ISR
, 0, 0);

55 
	}
}

	@kernel/timer.h

1 #i‚de‡
TIMER_H


2 
	#TIMER_H


	)

3 
timî_öô
();

4 
sys_gë_ticks
();

	@kernel/trap.c

1 
	~<kî√l/å≠.h
>

2 
	~<kî√l/èsk.h
>

3 
	~<kî√l/mem.h
>

4 
	~<öc/as£π.h
>

5 
	~<öc/mmu.h
>

6 
	~<öc/x86.h
>

12 
Tøp‰ame
 *
	gœ°_tf
;

18 
G©edesc
 
	gidt
[256] = { { 0 } };

19 
P£udodesc
 
	gidt_pd
 = {

20 (
idt
Ë- 1, (
uöt32_t
) idt

24 
TøpH™dÀr
 
	gå≠_hnd
[256] = { 0 };

26 c⁄° *
	$å≠«me
(
å≠no
)

28 c⁄° * c⁄° 
ex˙ames
[] = {

51 i‡(
å≠no
 < (
ex˙ames
)/(excnames[0]))

52  
ex˙ames
[
å≠no
];

53 i‡(
å≠no
 =
T_SYSCALL
)

55 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16)

58 
	}
}

61 
	$¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
)

63 
	`¥ötk
("TRAP fømê© %∞\n", 
tf
);

64 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

65 
	`¥ötk
("É† 0x----%04x\n", 
tf
->
tf_es
);

66 
	`¥ötk
(" d† 0x----%04x\n", 
tf
->
tf_ds
);

67 
	`¥ötk
("Åø∞0x%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

70 i‡(
tf
 =
œ°_tf
 &&Åf->
tf_å≠no
 =
T_PGFLT
)

71 
	`¥ötk
(" cr2 0x%08x\n", 
	`r¸2
());

72 
	`¥ötk
("Éº 0x%08x", 
tf
->
tf_îr
);

77 i‡(
tf
->
tf_å≠no
 =
T_PGFLT
)

78 
	`¥ötk
(" [%s, %s, %s]\n",

79 
tf
->
tf_îr
 & 4 ? "user" : "kernel",

80 
tf
->
tf_îr
 & 2 ? "write" : "read",

81 
tf
->
tf_îr
 & 1 ? "protection" : "not-present");

83 
	`¥ötk
("\n");

84 
	`¥ötk
("Éù 0x%08x\n", 
tf
->
tf_eù
);

85 
	`¥ötk
(" c† 0x----%04x\n", 
tf
->
tf_cs
);

86 
	`¥ötk
(" fœg 0x%08x\n", 
tf
->
tf_eÊags
);

87 i‡((
tf
->
tf_cs
 & 3) != 0) {

88 
	`¥ötk
("É• 0x%08x\n", 
tf
->
tf_e•
);

89 
	`¥ötk
(" s† 0x----%04x\n", 
tf
->
tf_ss
);

91 
	}
}

93 
	$¥öt_ªgs
(
PushRegs
 *
ªgs
)

95 
	`¥ötk
("Édò 0x%08x\n", 
ªgs
->
ªg_edi
);

96 
	`¥ötk
("Ésò 0x%08x\n", 
ªgs
->
ªg_esi
);

97 
	`¥ötk
("Éb∞ 0x%08x\n", 
ªgs
->
ªg_ebp
);

98 
	`¥ötk
(" oe• 0x%08x\n", 
ªgs
->
ªg_€•
);

99 
	`¥ötk
("Ébx 0x%08x\n", 
ªgs
->
ªg_ebx
);

100 
	`¥ötk
("Édx 0x%08x\n", 
ªgs
->
ªg_edx
);

101 
	`¥ötk
("Écx 0x%08x\n", 
ªgs
->
ªg_ecx
);

102 
	`¥ötk
("Éax 0x%08x\n", 
ªgs
->
ªg_óx
);

103 
	}
}

105 
ªgi°î_h™dÀr
(
å≠no
, 
TøpH™dÀr
 
hnd
, (*
å≠_íåy
)(), 
isTøp
, 
d∂
)

107 i‡(
å≠no
 >0 &&Åø≤ÿ< 256 && 
å≠_íåy
 !
NULL
)

109 
å≠_hnd
[
å≠no
] = 
hnd
;

111 
	`SETGATE
(
idt
[
å≠no
], 
isTøp
, 
GD_KT
, 
å≠_íåy
, 
d∂
);

113 
	}
}

122 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
)

124 
__asm
 
	`__vﬁ©ûe
("movl %0,%%esp\n"

130 : : "g" (
tf
) : "memory");

131 
	`∑nic
("iret failed");

132 
	}
}

135 
	$å≠_di•©ch
(
Tøp‰ame
 *
tf
)

140 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_SPURIOUS
) {

141 
	`¥ötk
("Spurious interrupt on irq 7\n");

142 
	`¥öt_å≠‰ame
(
tf
);

146 
œ°_tf
 = 
tf
;

148 i‡(
å≠_hnd
[
tf
->
tf_å≠no
] !
NULL
)

151 i‡((
tf
->
tf_cs
 & 3) == 3)

154 
Task
 *
cur_èsk
;

158 
__asm
 
	`__vﬁ©ûe
("cli");

163 
cur_èsk
->
tf
 = *tf;

164 
tf
 = &(
cur_èsk
->tf);

168 
å≠_hnd
[
tf
->
tf_å≠no
](tf);

171 
	`ív_p›_tf
(
tf
);

176 
	`¥öt_å≠‰ame
(
tf
);

177 
	`∑nic
("UnexpectedÅrap!");

179 
	}
}

181 
	$deÁu…_å≠_h™dÀr
(
Tøp‰ame
 *
tf
)

185 
œ°_tf
 = 
tf
;

188 
	`å≠_di•©ch
(
tf
);

189 
	}
}

192 
	$∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *
tf
)

194 
	`¥ötk
("PagêÁu… @ %p\n", 
	`r¸2
());

196 
	}
}

198 
	$å≠_öô
()

200 
i
;

202 
	`DeÁu…_ISR
();

203 
i
 = 0; i < 256; i++)

205 
	`SETGATE
(
idt
[
i
], 1, 
GD_KT
, 
DeÁu…_ISR
, 0);

206 
å≠_hnd
[
i
] = 
NULL
;

211 
	`GPFLT
();

212 
	`SETGATE
(
idt
[
T_GPFLT
], 1, 
GD_KT
, 
GPFLT
, 0);

213 
	`STACK_ISR
();

214 
	`SETGATE
(
idt
[
T_STACK
], 1, 
GD_KT
, 
STACK_ISR
, 0);

217 
	`PGFLT
();

218 
	`ªgi°î_h™dÀr
(
T_PGFLT
, 
∑ge_Áu…_h™dÀr
, 
PGFLT
, 1, 0);

220 
	`lidt
(&
idt_pd
);

221 
	}
}

	@kernel/trap.h

3 #i‚de‡
JOS_KERN_TRAP_H


4 
	#JOS_KERN_TRAP_H


	)

6 
	~<öc/å≠.h
>

7 
	~<öc/mmu.h
>

10 
G©edesc
 
idt
[];

11 
P£udodesc
 
idt_pd
;

13 
å≠_öô
();

15 
¥öt_ªgs
(
PushRegs
 *
ªgs
);

16 
¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
);

17 
∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *);

18 
backåa˚
(
Tøp‰ame
 *);

	@lib/console.c

1 
	~<öc/°rög.h
>

2 
	~<öc/sysˇŒ.h
>

6 
	$˝utch¨
(
ch
)

8 
c
 = 
ch
;

12 
	`puts
(&
c
, 1);

13 
	}
}

16 
	$gëch¨
()

18 
r
;

20 (
r
 = 
	`gëc
()) == 0){};

22  
r
;

23 
	}
}

	@lib/printf.c

2 
	~<öc/ty≥s.h
>

3 
	~<öc/°dio.h
>

4 
	~<öc/sysˇŒ.h
>

11 
	s¥ötbuf
 {

12 
	midx
;

13 
	m˙t
;

14 
	mbuf
[256];

19 
	$putch
(
ch
, 
¥ötbuf
 *
b
)

21 
b
->
buf
[b->
idx
++] = 
ch
;

22 i‡(
b
->
idx
 == 256-1) {

23 
	`puts
(
b
->
buf
, b->
idx
);

24 
b
->
idx
 = 0;

26 
b
->
˙t
++;

27 
	}
}

31 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

33 
¥ötbuf
 
b
;

35 
b
.
idx
 = 0;

36 
b
.
˙t
 = 0;

37 
	`v¥ötfmt
((*)
putch
, &
b
, 
fmt
, 
≠
);

38 
	`puts
(
b
.
buf
, b.
idx
);

40  
b
.
˙t
;

41 
	}
}

44 
	$˝rötf
(c⁄° *
fmt
, ...)

46 
va_li°
 
≠
;

47 
˙t
;

49 
	`va_°¨t
(
≠
, 
fmt
);

50 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

51 
	`va_íd
(
≠
);

53  
˙t
;

54 
	}
}

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/°d¨g.h
>

9 
	~<öc/îr‹.h
>

21 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
] =

23 [
E_UNSPECIFIED
] = "unspecifiedÉrror",

24 [
E_BAD_ENV
] = "badÉnvironment",

25 [
E_INVAL
] = "invalidÖarameter",

26 [
E_NO_MEM
] = "out of memory",

27 [
E_NO_FREE_ENV
] = "out ofÉnvironments",

28 [
E_FAULT
] = "segmentation fault",

29 [
E_IPC_NOT_RECV
]= "env isÇotÑecving",

30 [
E_EOF
] = "unexpectedÉnd of file",

38 
¥öäum
((*
putch
)(, *), *
putd©
,

39 
num
, 
ba£
, 
width
, 
∑dc
)

42 i‡(
num
 >
ba£
) {

43 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

46 --
width
 > 0)

47 
	`putch
(
∑dc
, 
putd©
);

51 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

52 
	}
}

57 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

59 i‡(
lÊag
 >= 2)

60  
	`va_¨g
(*
≠
, );

61 i‡(
lÊag
)

62  
	`va_¨g
(*
≠
, );

64  
	`va_¨g
(*
≠
, );

65 
	}
}

70 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

72 i‡(
lÊag
 >= 2)

73  
	`va_¨g
(*
≠
, );

74 i‡(
lÊag
)

75  
	`va_¨g
(*
≠
, );

77  
	`va_¨g
(*
≠
, );

78 
	}
}

82 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

85 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

87 c⁄° *
p
;

88 
ch
, 
îr
;

89 
num
;

90 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

91 
∑dc
;

94 (
ch
 = *(*Ë
fmt
++) != '%') {

95 i‡(
ch
 == '\0')

97 
	`putch
(
ch
, 
putd©
);

101 
∑dc
 = ' ';

102 
width
 = -1;

103 
¥ecisi⁄
 = -1;

104 
lÊag
 = 0;

105 
ÆtÊag
 = 0;

106 
ªswôch
:

107 
ch
 = *(*Ë
fmt
++) {

111 
∑dc
 = '-';

112 
ªswôch
;

116 
∑dc
 = '0';

117 
ªswôch
;

129 
¥ecisi⁄
 = 0; ; ++
fmt
) {

130 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

131 
ch
 = *
fmt
;

132 i‡(
ch
 < '0' || ch > '9')

135 
¥o˚ss_¥ecisi⁄
;

138 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

139 
¥o˚ss_¥ecisi⁄
;

142 i‡(
width
 < 0)

143 
width
 = 0;

144 
ªswôch
;

147 
ÆtÊag
 = 1;

148 
ªswôch
;

150 
¥o˚ss_¥ecisi⁄
:

151 i‡(
width
 < 0)

152 
width
 = 
¥ecisi⁄
,Örecision = -1;

153 
ªswôch
;

157 
lÊag
++;

158 
ªswôch
;

162 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

167 
îr
 = 
	`va_¨g
(
≠
, );

168 i‡(
îr
 < 0)

169 
îr
 = -err;

170 i‡(
îr
 >
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

171 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

173 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

178 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
)

179 
p
 = "(null)";

180 i‡(
width
 > 0 && 
∑dc
 != '-')

181 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

182 
	`putch
(
∑dc
, 
putd©
);

183 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

184 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

185 
	`putch
('?', 
putd©
);

187 
	`putch
(
ch
, 
putd©
);

188 ; 
width
 > 0; width--)

189 
	`putch
(' ', 
putd©
);

194 
num
 = 
	`gëöt
(&
≠
, 
lÊag
);

195 i‡((Ë
num
 < 0) {

196 
	`putch
('-', 
putd©
);

197 
num
 = -()Çum;

199 
ba£
 = 10;

200 
numbî
;

204 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

205 
ba£
 = 10;

206 
numbî
;

211 
	`putch
('X', 
putd©
);

212 
	`putch
('X', 
putd©
);

213 
	`putch
('X', 
putd©
);

218 
	`putch
('0', 
putd©
);

219 
	`putch
('x', 
putd©
);

220 
num
 = ()

221 (
uöçå_t
Ë
	`va_¨g
(
≠
, *);

222 
ba£
 = 16;

223 
numbî
;

227 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

228 
ba£
 = 16;

229 
numbî
:

230 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

235 
	`putch
(
ch
, 
putd©
);

240 
	`putch
('%', 
putd©
);

241 
fmt
--; fmt[-1] != '%'; fmt--)

246 
	}
}

249 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

251 
va_li°
 
≠
;

253 
	`va_°¨t
(
≠
, 
fmt
);

254 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

255 
	`va_íd
(
≠
);

256 
	}
}

258 
	s•rötbuf
 {

259 *
	mbuf
;

260 *
	mebuf
;

261 
	m˙t
;

265 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

267 
b
->
˙t
++;

268 i‡(
b
->
buf
 < b->
ebuf
)

269 *
b
->
buf
++ = 
ch
;

270 
	}
}

273 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

275 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

277 i‡(
buf
 =
NULL
 || 
n
 < 1)

278  -
E_INVAL
;

281 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

284 *
b
.
buf
 = '\0';

286  
b
.
˙t
;

287 
	}
}

290 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

292 
va_li°
 
≠
;

293 
rc
;

295 
	`va_°¨t
(
≠
, 
fmt
);

296 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
≠
);

297 
	`va_íd
(
≠
);

299  
rc
;

300 
	}
}

	@lib/readelf.c

2 
	#SECTSIZE
 512

	)

4 
	$lﬂd_‰om_∑
(
uöt32_t
 
ELFHDR
)

6 
Proghdr
 *
ph
, *
ïh
;

9 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

12 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

13 
bad
;

16 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

17 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

18 ; 
ph
 < 
ïh
;Öh++)

21 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
,Öh->
p_off£t
);

25 (((*)()Ë(
ELFH
->
e_íåy
))();

27 
bad
:

28 
	`outw
(0x8A00, 0x8A00);

29 
	`outw
(0x8A00, 0x8E00);

32 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/kbd.h
>

3 
	~<öc/shñl.h
>

4 
	~<öc/îr‹.h
>

5 
	~<öc/sysˇŒ.h
>

6 
	~<öc/°rög.h
>

8 
	#BUFLEN
 1024

	)

9 
	gbuf
[
BUFLEN
];

10 
	gèb_idx
;

11 
	gis_èb
;

12 
	gis_found
;

14 
Comm™d
 
comm™ds
[];

15 
NCOMMANDS
;

17 
hi°
[
SHELL_HIST_MAX
][
BUF_LEN
];

19 
hi°_hód
;

20 
hi°_èû
;

21 
hi°_cuº
;

23 *
	$ªadlöe
(c⁄° *
¥om±
)

25 
i
, 
c
;

27 i‡(
¥om±
 !
NULL
)

28 
	`˝rötf
("%s", 
¥om±
);

30 
i
 = 0;

32 
c
 = 
	`gëch¨
();

35 i‡(
is_èb
 && 
is_found
 && 
c
 != '\t') {

36 
	`°r˝y
(
buf
, 
comm™ds
[
èb_idx
].
«me
);

37 
i
 = 
	`°æí
(
buf
);

38 
èb_idx
 = 0;

39 
is_èb
 = 0;

40 
is_found
 = 0;

43 i‡(
c
 < 0) {

44 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

45  
NULL
;

46 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

47 
	`˝rötf
("\b");

48 
i
--;

49 } i‡(
c
 >' ' && c <0x7E && 
i
 < 
BUFLEN
-1) {

50 
	`˝rötf
("%c",
c
);

51 
buf
[
i
++] = 
c
;

52 } i‡(
c
 == '\n' || c == '\r') {

53 
	`˝rötf
("\n");

54 
buf
[
i
] = 0;

55  
buf
;

56 } i‡(
c
 == 0xc) {

57 
	`˛s
();

58 
	`˝rötf
("%s", 
¥om±
);

59 } i‡(
c
 == '\t') {

61 
cuº_idx
 = (
is_found
Ë? 
èb_idx
+1 : 0;

63 i‡(
is_found
) {

65 
tmp
;

66 
tmp
 = 0 ;Åm∞< 
	`°æí
(
comm™ds
[
èb_idx
].
«me
)-
i
 ;Åmp ++)

67 
	`˝rötf
("\b");

70 
cuº_idx
 ; cuº_idx < 
NCOMMANDS
 ; curr_idx ++) {

71 i‡(
	`°∫cmp
(
comm™ds
[
cuº_idx
].
«me
, 
buf
, 
i
) == 0) {

73 
	`˝rötf
("%s", 
comm™ds
[
cuº_idx
].
«me
+
i
);

74 
is_èb
 = 1;

75 
is_found
 = 1;

76 
èb_idx
 = 
cuº_idx
;

80 i‡(
cuº_idx
 =
NCOMMANDS
) {

81 
is_found
 = 0;

84 } i‡(
c
 >= 0x80) {

85 
c
)

87 
KEY_UP
:

88 i‡(
hi°_cuº
 !
hi°_hód
)

89 
hi°_cuº
 = (hi°_cuº =0Ë? 
SHELL_HIST_MAX
-1 : hist_curr-1;

91 
i
 --)

92 
	`˝rötf
("\b");

93 
i
 = 0 ; 
hi°
[
hi°_cuº
][i] ; i ++) {

94 
buf
[
i
] = 
hi°
[
hi°_cuº
][i];

95 
	`˝rötf
("%c",
buf
[
i
]);

98 
KEY_DN
:

99 i‡(
hi°_cuº
 !
hi°_èû
)

100 
hi°_cuº
 = (hi°_cuº =
SHELL_HIST_MAX
-1) ? 0 : hist_curr+1;

102 
i
 --)

103 
	`˝rötf
("\b");

104 
i
 = 0 ; 
hi°
[
hi°_cuº
][i] ; i ++) {

105 
buf
[
i
] = 
hi°
[
hi°_cuº
][i];

106 
	`˝rötf
("%c",
buf
[
i
]);

112 
	}
}

	@lib/string.c

6 
	~<öc/°rög.h
>

12 
	#ASM
 1

	)

15 
	$°æí
(c⁄° *
s
)

17 
n
;

19 
n
 = 0; *
s
 != '\0'; s++)

20 
n
++;

21  
n
;

22 
	}
}

25 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

27 
n
;

29 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

30 
n
++;

31  
n
;

32 
	}
}

35 
	$°r˝y
(*
d°
, c⁄° *
§c
)

37 *
ªt
;

39 
ªt
 = 
d°
;

40 (*
d°
++ = *
§c
++) != '\0')

42  
ªt
;

43 
	}
}

46 
	$°rˇt
(*
d°
, c⁄° *
§c
)

48 
Àn
 = 
	`°æí
(
d°
);

49 
	`°r˝y
(
d°
 + 
Àn
, 
§c
);

50  
d°
;

51 
	}
}

54 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

55 
size_t
 
i
;

56 *
ªt
;

58 
ªt
 = 
d°
;

59 
i
 = 0; i < 
size
; i++) {

60 *
d°
++ = *
§c
;

62 i‡(*
§c
 != '\0')

63 
§c
++;

65  
ªt
;

66 
	}
}

68 
size_t


69 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

71 *
d°_ö
;

73 
d°_ö
 = 
d°
;

74 i‡(
size
 > 0) {

75 --
size
 > 0 && *
§c
 != '\0')

76 *
d°
++ = *
§c
++;

77 *
d°
 = '\0';

79  
d°
 - 
d°_ö
;

80 
	}
}

83 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

85 *
p
 && *∞=*
q
)

86 
p
++, 
q
++;

87  (Ë((Ë*
p
 - (Ë*
q
);

88 
	}
}

91 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

93 
n
 > 0 && *
p
 && *∞=*
q
)

94 
n
--, 
p
++, 
q
++;

95 i‡(
n
 == 0)

98  (Ë((Ë*
p
 - (Ë*
q
);

99 
	}
}

104 
	$°rchr
(c⁄° *
s
, 
c
)

106 ; *
s
; s++)

107 i‡(*
s
 =
c
)

108  (*Ë
s
;

110 
	}
}

115 
	$°rföd
(c⁄° *
s
, 
c
)

117 ; *
s
; s++)

118 i‡(*
s
 =
c
)

120  (*Ë
s
;

121 
	}
}

123 #i‡
ASM


125 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

127 i‡(
n
 == 0)

128  
v
;

129 i‡(()
v
%4 =0 && 
n
%4 == 0) {

130 
c
 &= 0xFF;

131 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

132 
asm
 volatile("cld;Ñep stosl\n"

133 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

136 
asm
 volatile("cld;Ñep stosb\n"

137 :: "D" (
v
), "a" (
c
), "c" (
n
)

139  
v
;

140 
	}
}

143 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

145 c⁄° *
s
;

146 *
d
;

148 
s
 = 
§c
;

149 
d
 = 
d°
;

150 i‡(
s
 < 
d
 && s + 
n
 > d) {

151 
s
 +
n
;

152 
d
 +
n
;

153 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

154 
asm
 volatile("std;Ñep movsl\n"

155 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

157 
asm
 volatile("std;Ñep movsb\n"

158 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

160 
asm
 volatile("cld" ::: "cc");

162 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

163 
asm
 volatile("cld;Ñep movsl\n"

164 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

166 
asm
 volatile("cld;Ñep movsb\n"

167 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

169  
d°
;

170 
	}
}

175 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

177 *
p
;

178 
m
;

180 
p
 = 
v
;

181 
m
 = 
n
;

182 --
m
 >= 0)

183 *
p
++ = 
c
;

185  
v
;

186 
	}
}

189 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

191 c⁄° *
s
;

192 *
d
;

194 
s
 = 
§c
;

195 
d
 = 
d°
;

196 i‡(
s
 < 
d
 && s + 
n
 > d) {

197 
s
 +
n
;

198 
d
 +
n
;

199 
n
-- > 0)

200 *--
d
 = *--
s
;

202 
n
-- > 0)

203 *
d
++ = *
s
++;

205  
d°
;

206 
	}
}

210 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

212  
	`memmove
(
d°
, 
§c
, 
n
);

213 
	}
}

216 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

218 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

219 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

221 
n
-- > 0) {

222 i‡(*
s1
 !*
s2
)

223  (Ë*
s1
 - (Ë*
s2
;

224 
s1
++, 
s2
++;

228 
	}
}

231 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

233 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

234 ; 
s
 < 
íds
; s++)

235 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

237  (*Ë
s
;

238 
	}
}

241 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

243 
√g
 = 0;

244 
vÆ
 = 0;

247 *
s
 == ' ' || *s == '\t')

248 
s
++;

251 i‡(*
s
 == '+')

252 
s
++;

253 i‡(*
s
 == '-')

254 
s
++, 
√g
 = 1;

257 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

258 
s
 +2, 
ba£
 = 16;

259 i‡(
ba£
 =0 && 
s
[0] == '0')

260 
s
++, 
ba£
 = 8;

261 i‡(
ba£
 == 0)

262 
ba£
 = 10;

266 
dig
;

268 i‡(*
s
 >= '0' && *s <= '9')

269 
dig
 = *
s
 - '0';

270 i‡(*
s
 >= 'a' && *s <= 'z')

271 
dig
 = *
s
 - 'a' + 10;

272 i‡(*
s
 >= 'A' && *s <= 'Z')

273 
dig
 = *
s
 - 'A' + 10;

276 i‡(
dig
 >
ba£
)

278 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

282 i‡(
íd±r
)

283 *
íd±r
 = (*Ë
s
;

284  (
√g
 ? -
vÆ
 : val);

285 
	}
}

	@lib/syscall.c

1 
	~<öc/sysˇŒ.h
>

2 
	~<öc/å≠.h
>

4 
	#SYSCALL_NOARG
(
«me
, 
ªt_t
) \

5 
ªt_t
 
	`«me
(Ë{  
	`sysˇŒ
((
SYS_
##
«me
), 0, 0, 0, 0, 0); }

	)

8 
ölöe
 
öt32_t


9 
	$sysˇŒ
(
num
, 
uöt32_t
 
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

11 
öt32_t
 
ªt
;

25 
asm
 volatile("int %1\n"

26 : "˜" (
ªt
)

27 : "i" (
T_SYSCALL
),

28 "a" (
num
),

29 "d" (
a1
),

30 "c" (
a2
),

31 "b" (
a3
),

32 "D" (
a4
),

33 "S" (
a5
)

36  
ªt
;

37 
	}
}

40 
	$SYSCALL_NOARG
(
gëc
, )

43 
	$puts
(c⁄° *
s
, 
size_t
 
Àn
)

45 
	`sysˇŒ
(
SYS_puts
,(
uöt32_t
)
s
, 
Àn
, 0, 0, 0);

46 
	}
}

	@user/main.c

1 
	~<öc/°dio.h
>

2 
	~<öc/sysˇŒ.h
>

3 
	~<öc/shñl.h
>

5 
	$u£r_íåy
()

8 
asm
 volatile("movl %0,%%eax\n\t" \

16 
	`˝rötf
("WelcomeÅo User Land, cheers!\n");

17 
	`shñl
();

19 
	}
}

	@user/shell.c

1 
	~<öc/sysˇŒ.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/shñl.h
>

6 
	ghi°
[
SHELL_HIST_MAX
][
BUF_LEN
];

8 
	ghi°_hód
;

9 
	ghi°_èû
;

10 
	ghi°_cuº
;

13 
m⁄_hñp
(
¨gc
, **
¨gv
);

14 
mem_°©
(
¨gc
, **
¨gv
);

15 
¥öt_tick
(
¨gc
, **
¨gv
);

16 
chgcﬁ‹
(
¨gc
, **
¨gv
);

17 
f‹kã°
(
¨gc
, **
¨gv
);

19 
Comm™d
 
	gcomm™ds
[] = {

20 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

21 { "mem_°©", "Show cuºíàußgêo‡physiˇ»mem‹y", 
mem_°©
 },

22 { "¥öt_tick", "Di•œy sy°emÅick", 
¥öt_tick
 },

23 { "chgcﬁ‹", "Ch™gês¸ì¿ãxàcﬁ‹", 
chgcﬁ‹
 },

24 { "f‹kã°", "Te° fun˘i⁄Æôy o‡f‹k()", 
f‹kã°
 }

26 c⁄° 
	gNCOMMANDS
 = ((
comm™ds
)/(commands[0]));

28 
	$mem_°©
(
¨gc
, **
¨gv
)

30 
	`˝rötf
("%-10s MEM_STAT %10s\n", "--------", "--------");

31 
	`˝rötf
("U£d: %18dÖages\n", 
	`gë_num_u£d_∑ge
());

32 
	`˝rötf
("Fªe: %18dÖages\n", 
	`gë_num_‰ì_∑ge
());

34 
	}
}

36 
	$m⁄_hñp
(
¨gc
, **
¨gv
)

38 
i
;

40 
i
 = 0; i < 
NCOMMANDS
; i++)

41 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

43 
	}
}

45 
	$¥öt_tick
(
¨gc
, **
¨gv
)

47 
	`˝rötf
("NowÅick = %d\n", 
	`gë_ticks
());

49 
	}
}

51 
	$chgcﬁ‹
(
¨gc
, **
¨gv
)

53 i‡(
¨gc
 > 1)

55 
f‹e
 = 
¨gv
[1][0] - '0';

56 
	`£âextcﬁ‹
(
f‹e
, 0);

57 
	`˝rötf
("Ch™gêcﬁ‹ %d!\n", 
f‹e
);

61 
	`˝rötf
("No inputÅext color!\n");

64 
	}
}

66 
	#WHITESPACE
 "\t\r\¿"

	)

67 
	#MAXARGS
 16

	)

69 
	$runcmd
(*
buf
)

71 
¨gc
;

72 *
¨gv
[
MAXARGS
];

73 
i
;

76 
¨gc
 = 0;

77 
¨gv
[
¨gc
] = 0;

80 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

81 *
buf
++ = 0;

82 i‡(*
buf
 == 0)

86 i‡(
¨gc
 =
MAXARGS
-1) {

87 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

90 
¨gv
[
¨gc
++] = 
buf
;

91 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

92 
buf
++;

94 
¨gv
[
¨gc
] = 0;

97 i‡(
¨gc
 == 0)

99 
i
 = 0; i < 
NCOMMANDS
; i++) {

100 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

101  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
);

103 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

105 
	}
}

109 
	$èsk_job
()

111 
pid
 = 0;

112 
i
;

114 
pid
 = 
	`gëpid
();

115 
i
 = 0; i < 10; i++)

117 
	`˝rötf
("Im %d,Çow=%d\n", 
pid
, 
i
);

118 
	`¶ìp
(100);

120 
	}
}

122 
	$f‹kã°
(
¨gc
, **
¨gv
)

125 i‡(!
	`f‹k
())

129 
	`èsk_job
();

130 i‡(
	`f‹k
())

131 
	`èsk_job
();

134 i‡(
	`f‹k
())

135 
	`èsk_job
();

137 i‡(
	`f‹k
())

138 
	`èsk_job
();

140 
	`èsk_job
();

144 
	`kûl_£lf
();

146 
	}
}

148 
	$shñl
()

150 *
buf
;

151 
hi°_hód
 = 0;

152 
hi°_èû
 = 0;

153 
hi°_cuº
 = 0;

155 
	`˝rötf
("WelcomeÅoÅhe OSDI course!\n");

156 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

160 
buf
 = 
	`ªadlöe
("OSDI> ");

161 i‡(
buf
 !
NULL
)

163 
	`°r˝y
(
hi°
[
hi°_èû
], 
buf
);

164 
hi°_èû
 = (hi°_èû + 1Ë% 
SHELL_HIST_MAX
;

165 i‡(
hi°_hód
 =
hi°_èû
)

167 
hi°_hód
 = (hi°_hód + 1Ë% 
SHELL_HIST_MAX
;

168 
hi°
[
hi°_èû
][0] = 0;

170 
hi°_cuº
 = 
hi°_èû
;

172 i‡(
	`runcmd
(
buf
) < 0)

176 
	}
}

	@
1
.
1
/usr/include
47
650
boot/main.c
inc/assert.h
inc/elf.h
inc/error.h
inc/kbd.h
inc/memlayout.h
inc/mmu.h
inc/shell.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/syscall.h
inc/timer.h
inc/trap.h
inc/types.h
inc/x86.h
kernel/assert.c
kernel/entrypgdir.c
kernel/kbd.c
kernel/kclock.c
kernel/kclock.h
kernel/main.c
kernel/mem.c
kernel/mem.h
kernel/picirq.c
kernel/picirq.h
kernel/printf.c
kernel/sched.c
kernel/screen.c
kernel/shell.c
kernel/syscall.c
kernel/syscall.h
kernel/task.c
kernel/task.h
kernel/timer.c
kernel/timer.h
kernel/trap.c
kernel/trap.h
lib/console.c
lib/printf.c
lib/printfmt.c
lib/readelf.c
lib/readline.c
lib/string.c
lib/syscall.c
user/main.c
user/shell.c
